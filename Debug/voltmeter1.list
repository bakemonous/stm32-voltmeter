
voltmeter1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004160  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08004300  08004300  00014300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004354  08004354  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08004354  08004354  00014354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800435c  0800435c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800435c  0800435c  0001435c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004360  08004360  00014360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08004364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000006c  080043d0  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  080043d0  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009ee7  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bcb  00000000  00000000  00029fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000860  00000000  00000000  0002bb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000660  00000000  00000000  0002c3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000170a8  00000000  00000000  0002ca58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c0a4  00000000  00000000  00043b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092306  00000000  00000000  0004fba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000026fc  00000000  00000000  000e1eac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000e45a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080042e8 	.word	0x080042e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080042e8 	.word	0x080042e8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2iz>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d215      	bcs.n	8000882 <__aeabi_d2iz+0x36>
 8000856:	d511      	bpl.n	800087c <__aeabi_d2iz+0x30>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d912      	bls.n	8000888 <__aeabi_d2iz+0x3c>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000872:	fa23 f002 	lsr.w	r0, r3, r2
 8000876:	bf18      	it	ne
 8000878:	4240      	negne	r0, r0
 800087a:	4770      	bx	lr
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	4770      	bx	lr
 8000882:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000886:	d105      	bne.n	8000894 <__aeabi_d2iz+0x48>
 8000888:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800088c:	bf08      	it	eq
 800088e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b970 	b.w	8000b94 <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9e08      	ldr	r6, [sp, #32]
 80008d2:	460d      	mov	r5, r1
 80008d4:	4604      	mov	r4, r0
 80008d6:	460f      	mov	r7, r1
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d14a      	bne.n	8000972 <__udivmoddi4+0xa6>
 80008dc:	428a      	cmp	r2, r1
 80008de:	4694      	mov	ip, r2
 80008e0:	d965      	bls.n	80009ae <__udivmoddi4+0xe2>
 80008e2:	fab2 f382 	clz	r3, r2
 80008e6:	b143      	cbz	r3, 80008fa <__udivmoddi4+0x2e>
 80008e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008ec:	f1c3 0220 	rsb	r2, r3, #32
 80008f0:	409f      	lsls	r7, r3
 80008f2:	fa20 f202 	lsr.w	r2, r0, r2
 80008f6:	4317      	orrs	r7, r2
 80008f8:	409c      	lsls	r4, r3
 80008fa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008fe:	fa1f f58c 	uxth.w	r5, ip
 8000902:	fbb7 f1fe 	udiv	r1, r7, lr
 8000906:	0c22      	lsrs	r2, r4, #16
 8000908:	fb0e 7711 	mls	r7, lr, r1, r7
 800090c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000910:	fb01 f005 	mul.w	r0, r1, r5
 8000914:	4290      	cmp	r0, r2
 8000916:	d90a      	bls.n	800092e <__udivmoddi4+0x62>
 8000918:	eb1c 0202 	adds.w	r2, ip, r2
 800091c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000920:	f080 811c 	bcs.w	8000b5c <__udivmoddi4+0x290>
 8000924:	4290      	cmp	r0, r2
 8000926:	f240 8119 	bls.w	8000b5c <__udivmoddi4+0x290>
 800092a:	3902      	subs	r1, #2
 800092c:	4462      	add	r2, ip
 800092e:	1a12      	subs	r2, r2, r0
 8000930:	b2a4      	uxth	r4, r4
 8000932:	fbb2 f0fe 	udiv	r0, r2, lr
 8000936:	fb0e 2210 	mls	r2, lr, r0, r2
 800093a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800093e:	fb00 f505 	mul.w	r5, r0, r5
 8000942:	42a5      	cmp	r5, r4
 8000944:	d90a      	bls.n	800095c <__udivmoddi4+0x90>
 8000946:	eb1c 0404 	adds.w	r4, ip, r4
 800094a:	f100 32ff 	add.w	r2, r0, #4294967295
 800094e:	f080 8107 	bcs.w	8000b60 <__udivmoddi4+0x294>
 8000952:	42a5      	cmp	r5, r4
 8000954:	f240 8104 	bls.w	8000b60 <__udivmoddi4+0x294>
 8000958:	4464      	add	r4, ip
 800095a:	3802      	subs	r0, #2
 800095c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000960:	1b64      	subs	r4, r4, r5
 8000962:	2100      	movs	r1, #0
 8000964:	b11e      	cbz	r6, 800096e <__udivmoddi4+0xa2>
 8000966:	40dc      	lsrs	r4, r3
 8000968:	2300      	movs	r3, #0
 800096a:	e9c6 4300 	strd	r4, r3, [r6]
 800096e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000972:	428b      	cmp	r3, r1
 8000974:	d908      	bls.n	8000988 <__udivmoddi4+0xbc>
 8000976:	2e00      	cmp	r6, #0
 8000978:	f000 80ed 	beq.w	8000b56 <__udivmoddi4+0x28a>
 800097c:	2100      	movs	r1, #0
 800097e:	e9c6 0500 	strd	r0, r5, [r6]
 8000982:	4608      	mov	r0, r1
 8000984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000988:	fab3 f183 	clz	r1, r3
 800098c:	2900      	cmp	r1, #0
 800098e:	d149      	bne.n	8000a24 <__udivmoddi4+0x158>
 8000990:	42ab      	cmp	r3, r5
 8000992:	d302      	bcc.n	800099a <__udivmoddi4+0xce>
 8000994:	4282      	cmp	r2, r0
 8000996:	f200 80f8 	bhi.w	8000b8a <__udivmoddi4+0x2be>
 800099a:	1a84      	subs	r4, r0, r2
 800099c:	eb65 0203 	sbc.w	r2, r5, r3
 80009a0:	2001      	movs	r0, #1
 80009a2:	4617      	mov	r7, r2
 80009a4:	2e00      	cmp	r6, #0
 80009a6:	d0e2      	beq.n	800096e <__udivmoddi4+0xa2>
 80009a8:	e9c6 4700 	strd	r4, r7, [r6]
 80009ac:	e7df      	b.n	800096e <__udivmoddi4+0xa2>
 80009ae:	b902      	cbnz	r2, 80009b2 <__udivmoddi4+0xe6>
 80009b0:	deff      	udf	#255	; 0xff
 80009b2:	fab2 f382 	clz	r3, r2
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	f040 8090 	bne.w	8000adc <__udivmoddi4+0x210>
 80009bc:	1a8a      	subs	r2, r1, r2
 80009be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009c2:	fa1f fe8c 	uxth.w	lr, ip
 80009c6:	2101      	movs	r1, #1
 80009c8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009cc:	fb07 2015 	mls	r0, r7, r5, r2
 80009d0:	0c22      	lsrs	r2, r4, #16
 80009d2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009d6:	fb0e f005 	mul.w	r0, lr, r5
 80009da:	4290      	cmp	r0, r2
 80009dc:	d908      	bls.n	80009f0 <__udivmoddi4+0x124>
 80009de:	eb1c 0202 	adds.w	r2, ip, r2
 80009e2:	f105 38ff 	add.w	r8, r5, #4294967295
 80009e6:	d202      	bcs.n	80009ee <__udivmoddi4+0x122>
 80009e8:	4290      	cmp	r0, r2
 80009ea:	f200 80cb 	bhi.w	8000b84 <__udivmoddi4+0x2b8>
 80009ee:	4645      	mov	r5, r8
 80009f0:	1a12      	subs	r2, r2, r0
 80009f2:	b2a4      	uxth	r4, r4
 80009f4:	fbb2 f0f7 	udiv	r0, r2, r7
 80009f8:	fb07 2210 	mls	r2, r7, r0, r2
 80009fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a00:	fb0e fe00 	mul.w	lr, lr, r0
 8000a04:	45a6      	cmp	lr, r4
 8000a06:	d908      	bls.n	8000a1a <__udivmoddi4+0x14e>
 8000a08:	eb1c 0404 	adds.w	r4, ip, r4
 8000a0c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a10:	d202      	bcs.n	8000a18 <__udivmoddi4+0x14c>
 8000a12:	45a6      	cmp	lr, r4
 8000a14:	f200 80bb 	bhi.w	8000b8e <__udivmoddi4+0x2c2>
 8000a18:	4610      	mov	r0, r2
 8000a1a:	eba4 040e 	sub.w	r4, r4, lr
 8000a1e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a22:	e79f      	b.n	8000964 <__udivmoddi4+0x98>
 8000a24:	f1c1 0720 	rsb	r7, r1, #32
 8000a28:	408b      	lsls	r3, r1
 8000a2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a32:	fa05 f401 	lsl.w	r4, r5, r1
 8000a36:	fa20 f307 	lsr.w	r3, r0, r7
 8000a3a:	40fd      	lsrs	r5, r7
 8000a3c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a40:	4323      	orrs	r3, r4
 8000a42:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a46:	fa1f fe8c 	uxth.w	lr, ip
 8000a4a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a4e:	0c1c      	lsrs	r4, r3, #16
 8000a50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a54:	fb08 f50e 	mul.w	r5, r8, lr
 8000a58:	42a5      	cmp	r5, r4
 8000a5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a5e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a62:	d90b      	bls.n	8000a7c <__udivmoddi4+0x1b0>
 8000a64:	eb1c 0404 	adds.w	r4, ip, r4
 8000a68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a6c:	f080 8088 	bcs.w	8000b80 <__udivmoddi4+0x2b4>
 8000a70:	42a5      	cmp	r5, r4
 8000a72:	f240 8085 	bls.w	8000b80 <__udivmoddi4+0x2b4>
 8000a76:	f1a8 0802 	sub.w	r8, r8, #2
 8000a7a:	4464      	add	r4, ip
 8000a7c:	1b64      	subs	r4, r4, r5
 8000a7e:	b29d      	uxth	r5, r3
 8000a80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a84:	fb09 4413 	mls	r4, r9, r3, r4
 8000a88:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a8c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a90:	45a6      	cmp	lr, r4
 8000a92:	d908      	bls.n	8000aa6 <__udivmoddi4+0x1da>
 8000a94:	eb1c 0404 	adds.w	r4, ip, r4
 8000a98:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a9c:	d26c      	bcs.n	8000b78 <__udivmoddi4+0x2ac>
 8000a9e:	45a6      	cmp	lr, r4
 8000aa0:	d96a      	bls.n	8000b78 <__udivmoddi4+0x2ac>
 8000aa2:	3b02      	subs	r3, #2
 8000aa4:	4464      	add	r4, ip
 8000aa6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aaa:	fba3 9502 	umull	r9, r5, r3, r2
 8000aae:	eba4 040e 	sub.w	r4, r4, lr
 8000ab2:	42ac      	cmp	r4, r5
 8000ab4:	46c8      	mov	r8, r9
 8000ab6:	46ae      	mov	lr, r5
 8000ab8:	d356      	bcc.n	8000b68 <__udivmoddi4+0x29c>
 8000aba:	d053      	beq.n	8000b64 <__udivmoddi4+0x298>
 8000abc:	b156      	cbz	r6, 8000ad4 <__udivmoddi4+0x208>
 8000abe:	ebb0 0208 	subs.w	r2, r0, r8
 8000ac2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ac6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aca:	40ca      	lsrs	r2, r1
 8000acc:	40cc      	lsrs	r4, r1
 8000ace:	4317      	orrs	r7, r2
 8000ad0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000adc:	f1c3 0120 	rsb	r1, r3, #32
 8000ae0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ae4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ae8:	fa25 f101 	lsr.w	r1, r5, r1
 8000aec:	409d      	lsls	r5, r3
 8000aee:	432a      	orrs	r2, r5
 8000af0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af4:	fa1f fe8c 	uxth.w	lr, ip
 8000af8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afc:	fb07 1510 	mls	r5, r7, r0, r1
 8000b00:	0c11      	lsrs	r1, r2, #16
 8000b02:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b06:	fb00 f50e 	mul.w	r5, r0, lr
 8000b0a:	428d      	cmp	r5, r1
 8000b0c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b10:	d908      	bls.n	8000b24 <__udivmoddi4+0x258>
 8000b12:	eb1c 0101 	adds.w	r1, ip, r1
 8000b16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b1a:	d22f      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b1c:	428d      	cmp	r5, r1
 8000b1e:	d92d      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b20:	3802      	subs	r0, #2
 8000b22:	4461      	add	r1, ip
 8000b24:	1b49      	subs	r1, r1, r5
 8000b26:	b292      	uxth	r2, r2
 8000b28:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b2c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b34:	fb05 f10e 	mul.w	r1, r5, lr
 8000b38:	4291      	cmp	r1, r2
 8000b3a:	d908      	bls.n	8000b4e <__udivmoddi4+0x282>
 8000b3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b40:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b44:	d216      	bcs.n	8000b74 <__udivmoddi4+0x2a8>
 8000b46:	4291      	cmp	r1, r2
 8000b48:	d914      	bls.n	8000b74 <__udivmoddi4+0x2a8>
 8000b4a:	3d02      	subs	r5, #2
 8000b4c:	4462      	add	r2, ip
 8000b4e:	1a52      	subs	r2, r2, r1
 8000b50:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b54:	e738      	b.n	80009c8 <__udivmoddi4+0xfc>
 8000b56:	4631      	mov	r1, r6
 8000b58:	4630      	mov	r0, r6
 8000b5a:	e708      	b.n	800096e <__udivmoddi4+0xa2>
 8000b5c:	4639      	mov	r1, r7
 8000b5e:	e6e6      	b.n	800092e <__udivmoddi4+0x62>
 8000b60:	4610      	mov	r0, r2
 8000b62:	e6fb      	b.n	800095c <__udivmoddi4+0x90>
 8000b64:	4548      	cmp	r0, r9
 8000b66:	d2a9      	bcs.n	8000abc <__udivmoddi4+0x1f0>
 8000b68:	ebb9 0802 	subs.w	r8, r9, r2
 8000b6c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b70:	3b01      	subs	r3, #1
 8000b72:	e7a3      	b.n	8000abc <__udivmoddi4+0x1f0>
 8000b74:	4645      	mov	r5, r8
 8000b76:	e7ea      	b.n	8000b4e <__udivmoddi4+0x282>
 8000b78:	462b      	mov	r3, r5
 8000b7a:	e794      	b.n	8000aa6 <__udivmoddi4+0x1da>
 8000b7c:	4640      	mov	r0, r8
 8000b7e:	e7d1      	b.n	8000b24 <__udivmoddi4+0x258>
 8000b80:	46d0      	mov	r8, sl
 8000b82:	e77b      	b.n	8000a7c <__udivmoddi4+0x1b0>
 8000b84:	3d02      	subs	r5, #2
 8000b86:	4462      	add	r2, ip
 8000b88:	e732      	b.n	80009f0 <__udivmoddi4+0x124>
 8000b8a:	4608      	mov	r0, r1
 8000b8c:	e70a      	b.n	80009a4 <__udivmoddi4+0xd8>
 8000b8e:	4464      	add	r4, ip
 8000b90:	3802      	subs	r0, #2
 8000b92:	e742      	b.n	8000a1a <__udivmoddi4+0x14e>

08000b94 <__aeabi_idiv0>:
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b9e:	f000 fccd 	bl	800153c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba2:	f000 fa15 	bl	8000fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba6:	f000 fb03 	bl	80011b0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000baa:	f000 fa79 	bl	80010a0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000bae:	f000 fad5 	bl	800115c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  DWT_Init();        // инициализация DWT
 8000bb2:	f002 fcf1 	bl	8003598 <DWT_Init>
   set_brightness(7); // 0 - 7 яркость
 8000bb6:	2007      	movs	r0, #7
 8000bb8:	f002 fe76 	bl	80038a8 <set_brightness>
   clearDisplay();    // очистка дисплея
 8000bbc:	f002 fe60 	bl	8003880 <clearDisplay>

   int8_t TimeDisp[4] = {0,};
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
   int n=0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	613b      	str	r3, [r7, #16]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	   uint8_t str1[]="yy";
 8000bc8:	4ab5      	ldr	r2, [pc, #724]	; (8000ea0 <main+0x308>)
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	6812      	ldr	r2, [r2, #0]
 8000bce:	4611      	mov	r1, r2
 8000bd0:	8019      	strh	r1, [r3, #0]
 8000bd2:	3302      	adds	r3, #2
 8000bd4:	0c12      	lsrs	r2, r2, #16
 8000bd6:	701a      	strb	r2, [r3, #0]
	   uint8_t str[]="yy";
 8000bd8:	4ab1      	ldr	r2, [pc, #708]	; (8000ea0 <main+0x308>)
 8000bda:	463b      	mov	r3, r7
 8000bdc:	6812      	ldr	r2, [r2, #0]
 8000bde:	4611      	mov	r1, r2
 8000be0:	8019      	strh	r1, [r3, #0]
 8000be2:	3302      	adds	r3, #2
 8000be4:	0c12      	lsrs	r2, r2, #16
 8000be6:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8000be8:	2064      	movs	r0, #100	; 0x64
 8000bea:	f000 fd19 	bl	8001620 <HAL_Delay>
		HAL_ADC_Start(&hadc1);
 8000bee:	48ad      	ldr	r0, [pc, #692]	; (8000ea4 <main+0x30c>)
 8000bf0:	f000 fd7e 	bl	80016f0 <HAL_ADC_Start>
		while (i<8){
 8000bf4:	e039      	b.n	8000c6a <main+0xd2>
		 	adcResult = HAL_ADC_GetValue(&hadc1);
 8000bf6:	48ab      	ldr	r0, [pc, #684]	; (8000ea4 <main+0x30c>)
 8000bf8:	f000 ff3e 	bl	8001a78 <HAL_ADC_GetValue>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	461a      	mov	r2, r3
 8000c00:	4ba9      	ldr	r3, [pc, #676]	; (8000ea8 <main+0x310>)
 8000c02:	601a      	str	r2, [r3, #0]
		 	k=(((adcResult*980)/1241)*30)/10;
 8000c04:	4ba8      	ldr	r3, [pc, #672]	; (8000ea8 <main+0x310>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f44f 7275 	mov.w	r2, #980	; 0x3d4
 8000c0c:	fb02 f303 	mul.w	r3, r2, r3
 8000c10:	4aa6      	ldr	r2, [pc, #664]	; (8000eac <main+0x314>)
 8000c12:	fb82 1203 	smull	r1, r2, r2, r3
 8000c16:	1212      	asrs	r2, r2, #8
 8000c18:	17db      	asrs	r3, r3, #31
 8000c1a:	1ad2      	subs	r2, r2, r3
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	4413      	add	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]
		    k=(((adcResult*980)/1241)*30)/10;
 8000c24:	4ba0      	ldr	r3, [pc, #640]	; (8000ea8 <main+0x310>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f44f 7275 	mov.w	r2, #980	; 0x3d4
 8000c2c:	fb02 f303 	mul.w	r3, r2, r3
 8000c30:	4a9e      	ldr	r2, [pc, #632]	; (8000eac <main+0x314>)
 8000c32:	fb82 1203 	smull	r1, r2, r2, r3
 8000c36:	1212      	asrs	r2, r2, #8
 8000c38:	17db      	asrs	r3, r3, #31
 8000c3a:	1ad2      	subs	r2, r2, r3
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	4413      	add	r3, r2
 8000c42:	60fb      	str	r3, [r7, #12]
			sprintf((char *)str1,"%d\n", k);
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	4999      	ldr	r1, [pc, #612]	; (8000eb0 <main+0x318>)
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f002 fea8 	bl	80039a0 <siprintf>
			HAL_UART_Transmit(&huart1,str1,sizeof(str1)+2,15);
 8000c50:	1d39      	adds	r1, r7, #4
 8000c52:	230f      	movs	r3, #15
 8000c54:	2205      	movs	r2, #5
 8000c56:	4897      	ldr	r0, [pc, #604]	; (8000eb4 <main+0x31c>)
 8000c58:	f002 f8e2 	bl	8002e20 <HAL_UART_Transmit>
		    k1=k1+k;
 8000c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	4413      	add	r3, r2
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
			i=i+1;
 8000c64:	6a3b      	ldr	r3, [r7, #32]
 8000c66:	3301      	adds	r3, #1
 8000c68:	623b      	str	r3, [r7, #32]
		while (i<8){
 8000c6a:	6a3b      	ldr	r3, [r7, #32]
 8000c6c:	2b07      	cmp	r3, #7
 8000c6e:	ddc2      	ble.n	8000bf6 <main+0x5e>
		}
		i=0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
		n=k1/8;
 8000c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	da00      	bge.n	8000c7c <main+0xe4>
 8000c7a:	3307      	adds	r3, #7
 8000c7c:	10db      	asrs	r3, r3, #3
 8000c7e:	613b      	str	r3, [r7, #16]
		k1=0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
        	n=k8;
        }
        else {
        	n=k9;
        }*/
	    int n1=0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
	    int n2=0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61bb      	str	r3, [r7, #24]
	    int n3=0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]

		sprintf((char *)str,"%d\n", n);
 8000c90:	463b      	mov	r3, r7
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4986      	ldr	r1, [pc, #536]	; (8000eb0 <main+0x318>)
 8000c96:	4618      	mov	r0, r3
 8000c98:	f002 fe82 	bl	80039a0 <siprintf>
		//HAL_UART_Transmit(&huart1,str,sizeof(str)+2,15);
		HAL_Delay(100);
 8000c9c:	2064      	movs	r0, #100	; 0x64
 8000c9e:	f000 fcbf 	bl	8001620 <HAL_Delay>

		          //point(1); // двоеточие, 0 - мигает, 1 - горит постоянно, удалить функцию - нет двоеточия
       	TimeDisp[0] = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	723b      	strb	r3, [r7, #8]
       	TimeDisp[1] = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	727b      	strb	r3, [r7, #9]
       	TimeDisp[2] = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	72bb      	strb	r3, [r7, #10]
       	TimeDisp[3] = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	72fb      	strb	r3, [r7, #11]

		   if (n>1000){
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cb8:	dd12      	ble.n	8000ce0 <main+0x148>
        	TimeDisp[0] = floor(n/1000);
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	4a7e      	ldr	r2, [pc, #504]	; (8000eb8 <main+0x320>)
 8000cbe:	fb82 1203 	smull	r1, r2, r2, r3
 8000cc2:	1192      	asrs	r2, r2, #6
 8000cc4:	17db      	asrs	r3, r3, #31
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fd55 	bl	8000778 <__aeabi_i2d>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	4610      	mov	r0, r2
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f7ff fdb9 	bl	800084c <__aeabi_d2iz>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	b25b      	sxtb	r3, r3
 8000cde:	723b      	strb	r3, [r7, #8]
        }
        if (n>100){
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	2b64      	cmp	r3, #100	; 0x64
 8000ce4:	dd43      	ble.n	8000d6e <main+0x1d6>
        	if (n>1000){
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cec:	dd2c      	ble.n	8000d48 <main+0x1b0>
        	   n1=(floor(n/1000))*1000;
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	4a71      	ldr	r2, [pc, #452]	; (8000eb8 <main+0x320>)
 8000cf2:	fb82 1203 	smull	r1, r2, r2, r3
 8000cf6:	1192      	asrs	r2, r2, #6
 8000cf8:	17db      	asrs	r3, r3, #31
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fd3b 	bl	8000778 <__aeabi_i2d>
 8000d02:	f04f 0200 	mov.w	r2, #0
 8000d06:	4b6d      	ldr	r3, [pc, #436]	; (8000ebc <main+0x324>)
 8000d08:	f7ff faba 	bl	8000280 <__aeabi_dmul>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4610      	mov	r0, r2
 8000d12:	4619      	mov	r1, r3
 8000d14:	f7ff fd9a 	bl	800084c <__aeabi_d2iz>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	61fb      	str	r3, [r7, #28]
               TimeDisp[1] = floor((n-n1)/100);
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	4a67      	ldr	r2, [pc, #412]	; (8000ec0 <main+0x328>)
 8000d24:	fb82 1203 	smull	r1, r2, r2, r3
 8000d28:	1152      	asrs	r2, r2, #5
 8000d2a:	17db      	asrs	r3, r3, #31
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fd22 	bl	8000778 <__aeabi_i2d>
 8000d34:	4602      	mov	r2, r0
 8000d36:	460b      	mov	r3, r1
 8000d38:	4610      	mov	r0, r2
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	f7ff fd86 	bl	800084c <__aeabi_d2iz>
 8000d40:	4603      	mov	r3, r0
 8000d42:	b25b      	sxtb	r3, r3
 8000d44:	727b      	strb	r3, [r7, #9]
 8000d46:	e012      	b.n	8000d6e <main+0x1d6>
        	}
        	else{
        		TimeDisp[1] = floor(n/100);
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	4a5d      	ldr	r2, [pc, #372]	; (8000ec0 <main+0x328>)
 8000d4c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d50:	1152      	asrs	r2, r2, #5
 8000d52:	17db      	asrs	r3, r3, #31
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fd0e 	bl	8000778 <__aeabi_i2d>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	460b      	mov	r3, r1
 8000d60:	4610      	mov	r0, r2
 8000d62:	4619      	mov	r1, r3
 8000d64:	f7ff fd72 	bl	800084c <__aeabi_d2iz>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	727b      	strb	r3, [r7, #9]
        	}
        }
        if (n>10){
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	2b0a      	cmp	r3, #10
 8000d72:	dd6b      	ble.n	8000e4c <main+0x2b4>
        	if (n>1000){
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d7a:	dd16      	ble.n	8000daa <main+0x212>
        	n1=(floor(n/1000))*1000;
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	4a4e      	ldr	r2, [pc, #312]	; (8000eb8 <main+0x320>)
 8000d80:	fb82 1203 	smull	r1, r2, r2, r3
 8000d84:	1192      	asrs	r2, r2, #6
 8000d86:	17db      	asrs	r3, r3, #31
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fcf4 	bl	8000778 <__aeabi_i2d>
 8000d90:	f04f 0200 	mov.w	r2, #0
 8000d94:	4b49      	ldr	r3, [pc, #292]	; (8000ebc <main+0x324>)
 8000d96:	f7ff fa73 	bl	8000280 <__aeabi_dmul>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	4610      	mov	r0, r2
 8000da0:	4619      	mov	r1, r3
 8000da2:	f7ff fd53 	bl	800084c <__aeabi_d2iz>
 8000da6:	4603      	mov	r3, r0
 8000da8:	61fb      	str	r3, [r7, #28]
        	}
        	if (n>100){
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	2b64      	cmp	r3, #100	; 0x64
 8000dae:	dd3a      	ble.n	8000e26 <main+0x28e>
        		if (n-n1==0){
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d105      	bne.n	8000dc4 <main+0x22c>
        			n2=0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61bb      	str	r3, [r7, #24]
                	TimeDisp[2] = n2;
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	b25b      	sxtb	r3, r3
 8000dc0:	72bb      	strb	r3, [r7, #10]
 8000dc2:	e043      	b.n	8000e4c <main+0x2b4>
        		}
        		else{
            	n2=(floor((n-n1)/100))*100;
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	4a3d      	ldr	r2, [pc, #244]	; (8000ec0 <main+0x328>)
 8000dcc:	fb82 1203 	smull	r1, r2, r2, r3
 8000dd0:	1152      	asrs	r2, r2, #5
 8000dd2:	17db      	asrs	r3, r3, #31
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fcce 	bl	8000778 <__aeabi_i2d>
 8000ddc:	f04f 0200 	mov.w	r2, #0
 8000de0:	4b38      	ldr	r3, [pc, #224]	; (8000ec4 <main+0x32c>)
 8000de2:	f7ff fa4d 	bl	8000280 <__aeabi_dmul>
 8000de6:	4602      	mov	r2, r0
 8000de8:	460b      	mov	r3, r1
 8000dea:	4610      	mov	r0, r2
 8000dec:	4619      	mov	r1, r3
 8000dee:	f7ff fd2d 	bl	800084c <__aeabi_d2iz>
 8000df2:	4603      	mov	r3, r0
 8000df4:	61bb      	str	r3, [r7, #24]
            	TimeDisp[2] = floor((n-n1-n2)/10);
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	1ad2      	subs	r2, r2, r3
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	4a31      	ldr	r2, [pc, #196]	; (8000ec8 <main+0x330>)
 8000e02:	fb82 1203 	smull	r1, r2, r2, r3
 8000e06:	1092      	asrs	r2, r2, #2
 8000e08:	17db      	asrs	r3, r3, #31
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fcb3 	bl	8000778 <__aeabi_i2d>
 8000e12:	4602      	mov	r2, r0
 8000e14:	460b      	mov	r3, r1
 8000e16:	4610      	mov	r0, r2
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f7ff fd17 	bl	800084c <__aeabi_d2iz>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	b25b      	sxtb	r3, r3
 8000e22:	72bb      	strb	r3, [r7, #10]
 8000e24:	e012      	b.n	8000e4c <main+0x2b4>
        		}
        	}
            else{TimeDisp[2] = floor(n/10);//(dot-0x80);
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	4a27      	ldr	r2, [pc, #156]	; (8000ec8 <main+0x330>)
 8000e2a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e2e:	1092      	asrs	r2, r2, #2
 8000e30:	17db      	asrs	r3, r3, #31
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fc9f 	bl	8000778 <__aeabi_i2d>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	4610      	mov	r0, r2
 8000e40:	4619      	mov	r1, r3
 8000e42:	f7ff fd03 	bl	800084c <__aeabi_d2iz>
 8000e46:	4603      	mov	r3, r0
 8000e48:	b25b      	sxtb	r3, r3
 8000e4a:	72bb      	strb	r3, [r7, #10]
            }

        }
        if (n>1){
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	f340 80ac 	ble.w	8000fac <main+0x414>
        	if (n>1000){
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e5a:	dd16      	ble.n	8000e8a <main+0x2f2>
        	n1=(floor(n/1000))*1000;
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	4a16      	ldr	r2, [pc, #88]	; (8000eb8 <main+0x320>)
 8000e60:	fb82 1203 	smull	r1, r2, r2, r3
 8000e64:	1192      	asrs	r2, r2, #6
 8000e66:	17db      	asrs	r3, r3, #31
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fc84 	bl	8000778 <__aeabi_i2d>
 8000e70:	f04f 0200 	mov.w	r2, #0
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <main+0x324>)
 8000e76:	f7ff fa03 	bl	8000280 <__aeabi_dmul>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	4610      	mov	r0, r2
 8000e80:	4619      	mov	r1, r3
 8000e82:	f7ff fce3 	bl	800084c <__aeabi_d2iz>
 8000e86:	4603      	mov	r3, r0
 8000e88:	61fb      	str	r3, [r7, #28]
        	}
        	if (n>100){
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	2b64      	cmp	r3, #100	; 0x64
 8000e8e:	dd36      	ble.n	8000efe <main+0x366>
        		if (n-n1==0){
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d119      	bne.n	8000ecc <main+0x334>
        			n2=0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61bb      	str	r3, [r7, #24]
 8000e9c:	e02f      	b.n	8000efe <main+0x366>
 8000e9e:	bf00      	nop
 8000ea0:	08004304 	.word	0x08004304
 8000ea4:	20000088 	.word	0x20000088
 8000ea8:	20000118 	.word	0x20000118
 8000eac:	34cf1c43 	.word	0x34cf1c43
 8000eb0:	08004300 	.word	0x08004300
 8000eb4:	200000d0 	.word	0x200000d0
 8000eb8:	10624dd3 	.word	0x10624dd3
 8000ebc:	408f4000 	.word	0x408f4000
 8000ec0:	51eb851f 	.word	0x51eb851f
 8000ec4:	40590000 	.word	0x40590000
 8000ec8:	66666667 	.word	0x66666667
        	    }
        		else{
            	n2=(floor((n-n1)/100))*100;
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	4a3b      	ldr	r2, [pc, #236]	; (8000fc0 <main+0x428>)
 8000ed4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ed8:	1152      	asrs	r2, r2, #5
 8000eda:	17db      	asrs	r3, r3, #31
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fc4a 	bl	8000778 <__aeabi_i2d>
 8000ee4:	f04f 0200 	mov.w	r2, #0
 8000ee8:	4b36      	ldr	r3, [pc, #216]	; (8000fc4 <main+0x42c>)
 8000eea:	f7ff f9c9 	bl	8000280 <__aeabi_dmul>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	4610      	mov	r0, r2
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f7ff fca9 	bl	800084c <__aeabi_d2iz>
 8000efa:	4603      	mov	r3, r0
 8000efc:	61bb      	str	r3, [r7, #24]
        		}
        	}
        	if (n>10){
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	2b0a      	cmp	r3, #10
 8000f02:	dd43      	ble.n	8000f8c <main+0x3f4>
        		if (n-n1-n2==0){
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d112      	bne.n	8000f36 <main+0x39e>
        			n3=0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
        			TimeDisp[3] =n-n1-n2-n3;
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	b25b      	sxtb	r3, r3
 8000f32:	72fb      	strb	r3, [r7, #11]
 8000f34:	e02a      	b.n	8000f8c <main+0x3f4>
        		}
        		else{
            	n3=(floor((n-n1-n2)/10))*10;
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	1ad2      	subs	r2, r2, r3
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	4a21      	ldr	r2, [pc, #132]	; (8000fc8 <main+0x430>)
 8000f42:	fb82 1203 	smull	r1, r2, r2, r3
 8000f46:	1092      	asrs	r2, r2, #2
 8000f48:	17db      	asrs	r3, r3, #31
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fc13 	bl	8000778 <__aeabi_i2d>
 8000f52:	f04f 0200 	mov.w	r2, #0
 8000f56:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <main+0x434>)
 8000f58:	f7ff f992 	bl	8000280 <__aeabi_dmul>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4610      	mov	r0, r2
 8000f62:	4619      	mov	r1, r3
 8000f64:	f7ff fc72 	bl	800084c <__aeabi_d2iz>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	617b      	str	r3, [r7, #20]
            	TimeDisp[3] =n-n1-n2-n3;
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	b25b      	sxtb	r3, r3
 8000f8a:	72fb      	strb	r3, [r7, #11]
        		}
        	}

    		if (n-n1-n2-n3==0){
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	1ad2      	subs	r2, r2, r3
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d101      	bne.n	8000fa0 <main+0x408>
            	TimeDisp[3] = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	72fb      	strb	r3, [r7, #11]
    		}
    		if(n<10){
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	2b09      	cmp	r3, #9
 8000fa4:	dc02      	bgt.n	8000fac <main+0x414>
    			TimeDisp[3] = n;
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	b25b      	sxtb	r3, r3
 8000faa:	72fb      	strb	r3, [r7, #11]
    		}


        }

		display_mass(TimeDisp);
 8000fac:	f107 0308 	add.w	r3, r7, #8
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f002 fbe1 	bl	8003778 <display_mass>

		HAL_Delay(100);
 8000fb6:	2064      	movs	r0, #100	; 0x64
 8000fb8:	f000 fb32 	bl	8001620 <HAL_Delay>
  {
 8000fbc:	e604      	b.n	8000bc8 <main+0x30>
 8000fbe:	bf00      	nop
 8000fc0:	51eb851f 	.word	0x51eb851f
 8000fc4:	40590000 	.word	0x40590000
 8000fc8:	66666667 	.word	0x66666667
 8000fcc:	40240000 	.word	0x40240000

08000fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b094      	sub	sp, #80	; 0x50
 8000fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd6:	f107 0320 	add.w	r3, r7, #32
 8000fda:	2230      	movs	r2, #48	; 0x30
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f002 fcfe 	bl	80039e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	4b27      	ldr	r3, [pc, #156]	; (8001098 <SystemClock_Config+0xc8>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	4a26      	ldr	r2, [pc, #152]	; (8001098 <SystemClock_Config+0xc8>)
 8000ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001002:	6413      	str	r3, [r2, #64]	; 0x40
 8001004:	4b24      	ldr	r3, [pc, #144]	; (8001098 <SystemClock_Config+0xc8>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001010:	2300      	movs	r3, #0
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	4b21      	ldr	r3, [pc, #132]	; (800109c <SystemClock_Config+0xcc>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a20      	ldr	r2, [pc, #128]	; (800109c <SystemClock_Config+0xcc>)
 800101a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	4b1e      	ldr	r3, [pc, #120]	; (800109c <SystemClock_Config+0xcc>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800102c:	2301      	movs	r3, #1
 800102e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001030:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001036:	2302      	movs	r3, #2
 8001038:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800103a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800103e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001040:	2319      	movs	r3, #25
 8001042:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001044:	2390      	movs	r3, #144	; 0x90
 8001046:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001048:	2302      	movs	r3, #2
 800104a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800104c:	2304      	movs	r3, #4
 800104e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001050:	f107 0320 	add.w	r3, r7, #32
 8001054:	4618      	mov	r0, r3
 8001056:	f001 fa3b 	bl	80024d0 <HAL_RCC_OscConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001060:	f000 f904 	bl	800126c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001064:	230f      	movs	r3, #15
 8001066:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001068:	2302      	movs	r3, #2
 800106a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001074:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	2102      	movs	r1, #2
 8001080:	4618      	mov	r0, r3
 8001082:	f001 fc9d 	bl	80029c0 <HAL_RCC_ClockConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800108c:	f000 f8ee 	bl	800126c <Error_Handler>
  }
}
 8001090:	bf00      	nop
 8001092:	3750      	adds	r7, #80	; 0x50
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40023800 	.word	0x40023800
 800109c:	40007000 	.word	0x40007000

080010a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010a6:	463b      	mov	r3, r7
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010b2:	4b27      	ldr	r3, [pc, #156]	; (8001150 <MX_ADC1_Init+0xb0>)
 80010b4:	4a27      	ldr	r2, [pc, #156]	; (8001154 <MX_ADC1_Init+0xb4>)
 80010b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010b8:	4b25      	ldr	r3, [pc, #148]	; (8001150 <MX_ADC1_Init+0xb0>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010be:	4b24      	ldr	r3, [pc, #144]	; (8001150 <MX_ADC1_Init+0xb0>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80010c4:	4b22      	ldr	r3, [pc, #136]	; (8001150 <MX_ADC1_Init+0xb0>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010ca:	4b21      	ldr	r3, [pc, #132]	; (8001150 <MX_ADC1_Init+0xb0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010d0:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <MX_ADC1_Init+0xb0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010d8:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <MX_ADC1_Init+0xb0>)
 80010da:	2200      	movs	r2, #0
 80010dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010de:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <MX_ADC1_Init+0xb0>)
 80010e0:	4a1d      	ldr	r2, [pc, #116]	; (8001158 <MX_ADC1_Init+0xb8>)
 80010e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e4:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <MX_ADC1_Init+0xb0>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80010ea:	4b19      	ldr	r3, [pc, #100]	; (8001150 <MX_ADC1_Init+0xb0>)
 80010ec:	2202      	movs	r2, #2
 80010ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010f0:	4b17      	ldr	r3, [pc, #92]	; (8001150 <MX_ADC1_Init+0xb0>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f8:	4b15      	ldr	r3, [pc, #84]	; (8001150 <MX_ADC1_Init+0xb0>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010fe:	4814      	ldr	r0, [pc, #80]	; (8001150 <MX_ADC1_Init+0xb0>)
 8001100:	f000 fab2 	bl	8001668 <HAL_ADC_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800110a:	f000 f8af 	bl	800126c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800110e:	2300      	movs	r3, #0
 8001110:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001112:	2301      	movs	r3, #1
 8001114:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111a:	463b      	mov	r3, r7
 800111c:	4619      	mov	r1, r3
 800111e:	480c      	ldr	r0, [pc, #48]	; (8001150 <MX_ADC1_Init+0xb0>)
 8001120:	f000 fcd6 	bl	8001ad0 <HAL_ADC_ConfigChannel>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800112a:	f000 f89f 	bl	800126c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 800112e:	2302      	movs	r3, #2
 8001130:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001132:	463b      	mov	r3, r7
 8001134:	4619      	mov	r1, r3
 8001136:	4806      	ldr	r0, [pc, #24]	; (8001150 <MX_ADC1_Init+0xb0>)
 8001138:	f000 fcca 	bl	8001ad0 <HAL_ADC_ConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001142:	f000 f893 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000088 	.word	0x20000088
 8001154:	40012000 	.word	0x40012000
 8001158:	0f000001 	.word	0x0f000001

0800115c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <MX_USART1_UART_Init+0x4c>)
 8001162:	4a12      	ldr	r2, [pc, #72]	; (80011ac <MX_USART1_UART_Init+0x50>)
 8001164:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <MX_USART1_UART_Init+0x4c>)
 8001168:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800116c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <MX_USART1_UART_Init+0x4c>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <MX_USART1_UART_Init+0x4c>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <MX_USART1_UART_Init+0x4c>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001180:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <MX_USART1_UART_Init+0x4c>)
 8001182:	220c      	movs	r2, #12
 8001184:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001186:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <MX_USART1_UART_Init+0x4c>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <MX_USART1_UART_Init+0x4c>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <MX_USART1_UART_Init+0x4c>)
 8001194:	f001 fdf4 	bl	8002d80 <HAL_UART_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800119e:	f000 f865 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200000d0 	.word	0x200000d0
 80011ac:	40011000 	.word	0x40011000

080011b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	; 0x28
 80011b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	4b26      	ldr	r3, [pc, #152]	; (8001264 <MX_GPIO_Init+0xb4>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a25      	ldr	r2, [pc, #148]	; (8001264 <MX_GPIO_Init+0xb4>)
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b23      	ldr	r3, [pc, #140]	; (8001264 <MX_GPIO_Init+0xb4>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <MX_GPIO_Init+0xb4>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a1e      	ldr	r2, [pc, #120]	; (8001264 <MX_GPIO_Init+0xb4>)
 80011ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <MX_GPIO_Init+0xb4>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <MX_GPIO_Init+0xb4>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a17      	ldr	r2, [pc, #92]	; (8001264 <MX_GPIO_Init+0xb4>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <MX_GPIO_Init+0xb4>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <MX_GPIO_Init+0xb4>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a10      	ldr	r2, [pc, #64]	; (8001264 <MX_GPIO_Init+0xb4>)
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <MX_GPIO_Init+0xb4>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLK_Pin|DIO_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	2160      	movs	r1, #96	; 0x60
 800123a:	480b      	ldr	r0, [pc, #44]	; (8001268 <MX_GPIO_Init+0xb8>)
 800123c:	f001 f92e 	bl	800249c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CLK_Pin DIO_Pin */
  GPIO_InitStruct.Pin = CLK_Pin|DIO_Pin;
 8001240:	2360      	movs	r3, #96	; 0x60
 8001242:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001244:	2311      	movs	r3, #17
 8001246:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001248:	2301      	movs	r3, #1
 800124a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2300      	movs	r3, #0
 800124e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4619      	mov	r1, r3
 8001256:	4804      	ldr	r0, [pc, #16]	; (8001268 <MX_GPIO_Init+0xb8>)
 8001258:	f000 ff84 	bl	8002164 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800125c:	bf00      	nop
 800125e:	3728      	adds	r7, #40	; 0x28
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40023800 	.word	0x40023800
 8001268:	40020400 	.word	0x40020400

0800126c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001270:	b672      	cpsid	i
}
 8001272:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001274:	e7fe      	b.n	8001274 <Error_Handler+0x8>
	...

08001278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <HAL_MspInit+0x4c>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	4a0f      	ldr	r2, [pc, #60]	; (80012c4 <HAL_MspInit+0x4c>)
 8001288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128c:	6453      	str	r3, [r2, #68]	; 0x44
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <HAL_MspInit+0x4c>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <HAL_MspInit+0x4c>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	4a08      	ldr	r2, [pc, #32]	; (80012c4 <HAL_MspInit+0x4c>)
 80012a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a8:	6413      	str	r3, [r2, #64]	; 0x40
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_MspInit+0x4c>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800

080012c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a1b      	ldr	r2, [pc, #108]	; (8001354 <HAL_ADC_MspInit+0x8c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d12f      	bne.n	800134a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <HAL_ADC_MspInit+0x90>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	4a19      	ldr	r2, [pc, #100]	; (8001358 <HAL_ADC_MspInit+0x90>)
 80012f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f8:	6453      	str	r3, [r2, #68]	; 0x44
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <HAL_ADC_MspInit+0x90>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <HAL_ADC_MspInit+0x90>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a12      	ldr	r2, [pc, #72]	; (8001358 <HAL_ADC_MspInit+0x90>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <HAL_ADC_MspInit+0x90>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001322:	2301      	movs	r3, #1
 8001324:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001326:	2303      	movs	r3, #3
 8001328:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	4809      	ldr	r0, [pc, #36]	; (800135c <HAL_ADC_MspInit+0x94>)
 8001336:	f000 ff15 	bl	8002164 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	2012      	movs	r0, #18
 8001340:	f000 fed9 	bl	80020f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001344:	2012      	movs	r0, #18
 8001346:	f000 fef2 	bl	800212e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800134a:	bf00      	nop
 800134c:	3728      	adds	r7, #40	; 0x28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40012000 	.word	0x40012000
 8001358:	40023800 	.word	0x40023800
 800135c:	40020000 	.word	0x40020000

08001360 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a19      	ldr	r2, [pc, #100]	; (80013e4 <HAL_UART_MspInit+0x84>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d12c      	bne.n	80013dc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <HAL_UART_MspInit+0x88>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	4a17      	ldr	r2, [pc, #92]	; (80013e8 <HAL_UART_MspInit+0x88>)
 800138c:	f043 0310 	orr.w	r3, r3, #16
 8001390:	6453      	str	r3, [r2, #68]	; 0x44
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <HAL_UART_MspInit+0x88>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	f003 0310 	and.w	r3, r3, #16
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_UART_MspInit+0x88>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a10      	ldr	r2, [pc, #64]	; (80013e8 <HAL_UART_MspInit+0x88>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_UART_MspInit+0x88>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c8:	2303      	movs	r3, #3
 80013ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013cc:	2307      	movs	r3, #7
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <HAL_UART_MspInit+0x8c>)
 80013d8:	f000 fec4 	bl	8002164 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013dc:	bf00      	nop
 80013de:	3728      	adds	r7, #40	; 0x28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40011000 	.word	0x40011000
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020000 	.word	0x40020000

080013f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013f4:	e7fe      	b.n	80013f4 <NMI_Handler+0x4>

080013f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <HardFault_Handler+0x4>

080013fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <MemManage_Handler+0x4>

08001402 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <BusFault_Handler+0x4>

08001408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800140c:	e7fe      	b.n	800140c <UsageFault_Handler+0x4>

0800140e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800143c:	f000 f8d0 	bl	80015e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}

08001444 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <ADC_IRQHandler+0x10>)
 800144a:	f000 fa05 	bl	8001858 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000088 	.word	0x20000088

08001458 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001460:	4a14      	ldr	r2, [pc, #80]	; (80014b4 <_sbrk+0x5c>)
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <_sbrk+0x60>)
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800146c:	4b13      	ldr	r3, [pc, #76]	; (80014bc <_sbrk+0x64>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d102      	bne.n	800147a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <_sbrk+0x64>)
 8001476:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <_sbrk+0x68>)
 8001478:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <_sbrk+0x64>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	429a      	cmp	r2, r3
 8001486:	d207      	bcs.n	8001498 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001488:	f002 fab2 	bl	80039f0 <__errno>
 800148c:	4603      	mov	r3, r0
 800148e:	220c      	movs	r2, #12
 8001490:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
 8001496:	e009      	b.n	80014ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <_sbrk+0x64>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800149e:	4b07      	ldr	r3, [pc, #28]	; (80014bc <_sbrk+0x64>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	4a05      	ldr	r2, [pc, #20]	; (80014bc <_sbrk+0x64>)
 80014a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014aa:	68fb      	ldr	r3, [r7, #12]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20020000 	.word	0x20020000
 80014b8:	00000400 	.word	0x00000400
 80014bc:	2000011c 	.word	0x2000011c
 80014c0:	20000270 	.word	0x20000270

080014c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <SystemInit+0x20>)
 80014ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ce:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <SystemInit+0x20>)
 80014d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001520 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014ec:	f7ff ffea 	bl	80014c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014f0:	480c      	ldr	r0, [pc, #48]	; (8001524 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014f2:	490d      	ldr	r1, [pc, #52]	; (8001528 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014f4:	4a0d      	ldr	r2, [pc, #52]	; (800152c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f8:	e002      	b.n	8001500 <LoopCopyDataInit>

080014fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fe:	3304      	adds	r3, #4

08001500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001504:	d3f9      	bcc.n	80014fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001506:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001508:	4c0a      	ldr	r4, [pc, #40]	; (8001534 <LoopFillZerobss+0x22>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800150c:	e001      	b.n	8001512 <LoopFillZerobss>

0800150e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001510:	3204      	adds	r2, #4

08001512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001514:	d3fb      	bcc.n	800150e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001516:	f002 fa71 	bl	80039fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800151a:	f7ff fb3d 	bl	8000b98 <main>
  bx  lr    
 800151e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001520:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001528:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800152c:	08004364 	.word	0x08004364
  ldr r2, =_sbss
 8001530:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001534:	20000270 	.word	0x20000270

08001538 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001538:	e7fe      	b.n	8001538 <DMA1_Stream0_IRQHandler>
	...

0800153c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001540:	4b0e      	ldr	r3, [pc, #56]	; (800157c <HAL_Init+0x40>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0d      	ldr	r2, [pc, #52]	; (800157c <HAL_Init+0x40>)
 8001546:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800154a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800154c:	4b0b      	ldr	r3, [pc, #44]	; (800157c <HAL_Init+0x40>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0a      	ldr	r2, [pc, #40]	; (800157c <HAL_Init+0x40>)
 8001552:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001556:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_Init+0x40>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a07      	ldr	r2, [pc, #28]	; (800157c <HAL_Init+0x40>)
 800155e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001562:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001564:	2003      	movs	r0, #3
 8001566:	f000 fdbb 	bl	80020e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156a:	200f      	movs	r0, #15
 800156c:	f000 f808 	bl	8001580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001570:	f7ff fe82 	bl	8001278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40023c00 	.word	0x40023c00

08001580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_InitTick+0x54>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_InitTick+0x58>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001596:	fbb3 f3f1 	udiv	r3, r3, r1
 800159a:	fbb2 f3f3 	udiv	r3, r2, r3
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 fdd3 	bl	800214a <HAL_SYSTICK_Config>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00e      	b.n	80015cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b0f      	cmp	r3, #15
 80015b2:	d80a      	bhi.n	80015ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b4:	2200      	movs	r2, #0
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295
 80015bc:	f000 fd9b 	bl	80020f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c0:	4a06      	ldr	r2, [pc, #24]	; (80015dc <HAL_InitTick+0x5c>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e000      	b.n	80015cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000000 	.word	0x20000000
 80015d8:	20000008 	.word	0x20000008
 80015dc:	20000004 	.word	0x20000004

080015e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_IncTick+0x20>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_IncTick+0x24>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4413      	add	r3, r2
 80015f0:	4a04      	ldr	r2, [pc, #16]	; (8001604 <HAL_IncTick+0x24>)
 80015f2:	6013      	str	r3, [r2, #0]
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000008 	.word	0x20000008
 8001604:	20000120 	.word	0x20000120

08001608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return uwTick;
 800160c:	4b03      	ldr	r3, [pc, #12]	; (800161c <HAL_GetTick+0x14>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20000120 	.word	0x20000120

08001620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001628:	f7ff ffee 	bl	8001608 <HAL_GetTick>
 800162c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001638:	d005      	beq.n	8001646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800163a:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <HAL_Delay+0x44>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4413      	add	r3, r2
 8001644:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001646:	bf00      	nop
 8001648:	f7ff ffde 	bl	8001608 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	429a      	cmp	r2, r3
 8001656:	d8f7      	bhi.n	8001648 <HAL_Delay+0x28>
  {
  }
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000008 	.word	0x20000008

08001668 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e033      	b.n	80016e6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	2b00      	cmp	r3, #0
 8001684:	d109      	bne.n	800169a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff fe1e 	bl	80012c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f003 0310 	and.w	r3, r3, #16
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d118      	bne.n	80016d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016ae:	f023 0302 	bic.w	r3, r3, #2
 80016b2:	f043 0202 	orr.w	r2, r3, #2
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 fb3a 	bl	8001d34 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f023 0303 	bic.w	r3, r3, #3
 80016ce:	f043 0201 	orr.w	r2, r3, #1
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	641a      	str	r2, [r3, #64]	; 0x40
 80016d6:	e001      	b.n	80016dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001702:	2b01      	cmp	r3, #1
 8001704:	d101      	bne.n	800170a <HAL_ADC_Start+0x1a>
 8001706:	2302      	movs	r3, #2
 8001708:	e097      	b.n	800183a <HAL_ADC_Start+0x14a>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b01      	cmp	r3, #1
 800171e:	d018      	beq.n	8001752 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0201 	orr.w	r2, r2, #1
 800172e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001730:	4b45      	ldr	r3, [pc, #276]	; (8001848 <HAL_ADC_Start+0x158>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a45      	ldr	r2, [pc, #276]	; (800184c <HAL_ADC_Start+0x15c>)
 8001736:	fba2 2303 	umull	r2, r3, r2, r3
 800173a:	0c9a      	lsrs	r2, r3, #18
 800173c:	4613      	mov	r3, r2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	4413      	add	r3, r2
 8001742:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001744:	e002      	b.n	800174c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	3b01      	subs	r3, #1
 800174a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f9      	bne.n	8001746 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b01      	cmp	r3, #1
 800175e:	d15f      	bne.n	8001820 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001768:	f023 0301 	bic.w	r3, r3, #1
 800176c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800177e:	2b00      	cmp	r3, #0
 8001780:	d007      	beq.n	8001792 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800178a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800179a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800179e:	d106      	bne.n	80017ae <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a4:	f023 0206 	bic.w	r2, r3, #6
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	645a      	str	r2, [r3, #68]	; 0x44
 80017ac:	e002      	b.n	80017b4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017bc:	4b24      	ldr	r3, [pc, #144]	; (8001850 <HAL_ADC_Start+0x160>)
 80017be:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80017c8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 031f 	and.w	r3, r3, #31
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10f      	bne.n	80017f6 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d129      	bne.n	8001838 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689a      	ldr	r2, [r3, #8]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	e020      	b.n	8001838 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a16      	ldr	r2, [pc, #88]	; (8001854 <HAL_ADC_Start+0x164>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d11b      	bne.n	8001838 <HAL_ADC_Start+0x148>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d114      	bne.n	8001838 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	e00b      	b.n	8001838 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	f043 0210 	orr.w	r2, r3, #16
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001830:	f043 0201 	orr.w	r2, r3, #1
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	20000000 	.word	0x20000000
 800184c:	431bde83 	.word	0x431bde83
 8001850:	40012300 	.word	0x40012300
 8001854:	40012000 	.word	0x40012000

08001858 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	2300      	movs	r3, #0
 8001866:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	f003 0320 	and.w	r3, r3, #32
 8001886:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d049      	beq.n	8001922 <HAL_ADC_IRQHandler+0xca>
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d046      	beq.n	8001922 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	f003 0310 	and.w	r3, r3, #16
 800189c:	2b00      	cmp	r3, #0
 800189e:	d105      	bne.n	80018ac <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d12b      	bne.n	8001912 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d127      	bne.n	8001912 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d006      	beq.n	80018de <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d119      	bne.n	8001912 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 0220 	bic.w	r2, r2, #32
 80018ec:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d105      	bne.n	8001912 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f043 0201 	orr.w	r2, r3, #1
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 f8bd 	bl	8001a92 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f06f 0212 	mvn.w	r2, #18
 8001920:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001930:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d057      	beq.n	80019e8 <HAL_ADC_IRQHandler+0x190>
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d054      	beq.n	80019e8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	f003 0310 	and.w	r3, r3, #16
 8001946:	2b00      	cmp	r3, #0
 8001948:	d105      	bne.n	8001956 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d139      	bne.n	80019d8 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800196a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800196e:	2b00      	cmp	r3, #0
 8001970:	d006      	beq.n	8001980 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800197c:	2b00      	cmp	r3, #0
 800197e:	d12b      	bne.n	80019d8 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800198a:	2b00      	cmp	r3, #0
 800198c:	d124      	bne.n	80019d8 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001998:	2b00      	cmp	r3, #0
 800199a:	d11d      	bne.n	80019d8 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d119      	bne.n	80019d8 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019b2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d105      	bne.n	80019d8 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d0:	f043 0201 	orr.w	r2, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 faa7 	bl	8001f2c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f06f 020c 	mvn.w	r2, #12
 80019e6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d017      	beq.n	8001a2e <HAL_ADC_IRQHandler+0x1d6>
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d014      	beq.n	8001a2e <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d10d      	bne.n	8001a2e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 f841 	bl	8001aa6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f06f 0201 	mvn.w	r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f003 0320 	and.w	r3, r3, #32
 8001a34:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a3c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d015      	beq.n	8001a70 <HAL_ADC_IRQHandler+0x218>
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d012      	beq.n	8001a70 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	f043 0202 	orr.w	r2, r3, #2
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f06f 0220 	mvn.w	r2, #32
 8001a5e:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 f82a 	bl	8001aba <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f06f 0220 	mvn.w	r2, #32
 8001a6e:	601a      	str	r2, [r3, #0]
  }
}
 8001a70:	bf00      	nop
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
	...

08001ad0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d101      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x1c>
 8001ae8:	2302      	movs	r3, #2
 8001aea:	e113      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x244>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b09      	cmp	r3, #9
 8001afa:	d925      	bls.n	8001b48 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68d9      	ldr	r1, [r3, #12]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4413      	add	r3, r2
 8001b10:	3b1e      	subs	r3, #30
 8001b12:	2207      	movs	r2, #7
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43da      	mvns	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	400a      	ands	r2, r1
 8001b20:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68d9      	ldr	r1, [r3, #12]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	4618      	mov	r0, r3
 8001b34:	4603      	mov	r3, r0
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4403      	add	r3, r0
 8001b3a:	3b1e      	subs	r3, #30
 8001b3c:	409a      	lsls	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	e022      	b.n	8001b8e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6919      	ldr	r1, [r3, #16]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	461a      	mov	r2, r3
 8001b56:	4613      	mov	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4413      	add	r3, r2
 8001b5c:	2207      	movs	r2, #7
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43da      	mvns	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	400a      	ands	r2, r1
 8001b6a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6919      	ldr	r1, [r3, #16]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	4603      	mov	r3, r0
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	4403      	add	r3, r0
 8001b84:	409a      	lsls	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b06      	cmp	r3, #6
 8001b94:	d824      	bhi.n	8001be0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3b05      	subs	r3, #5
 8001ba8:	221f      	movs	r2, #31
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	400a      	ands	r2, r1
 8001bb6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	3b05      	subs	r3, #5
 8001bd2:	fa00 f203 	lsl.w	r2, r0, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	635a      	str	r2, [r3, #52]	; 0x34
 8001bde:	e04c      	b.n	8001c7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b0c      	cmp	r3, #12
 8001be6:	d824      	bhi.n	8001c32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3b23      	subs	r3, #35	; 0x23
 8001bfa:	221f      	movs	r2, #31
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43da      	mvns	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	400a      	ands	r2, r1
 8001c08:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	4618      	mov	r0, r3
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	3b23      	subs	r3, #35	; 0x23
 8001c24:	fa00 f203 	lsl.w	r2, r0, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c30:	e023      	b.n	8001c7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	3b41      	subs	r3, #65	; 0x41
 8001c44:	221f      	movs	r2, #31
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	400a      	ands	r2, r1
 8001c52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	4618      	mov	r0, r3
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3b41      	subs	r3, #65	; 0x41
 8001c6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c7a:	4b29      	ldr	r3, [pc, #164]	; (8001d20 <HAL_ADC_ConfigChannel+0x250>)
 8001c7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a28      	ldr	r2, [pc, #160]	; (8001d24 <HAL_ADC_ConfigChannel+0x254>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d10f      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x1d8>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b12      	cmp	r3, #18
 8001c8e:	d10b      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a1d      	ldr	r2, [pc, #116]	; (8001d24 <HAL_ADC_ConfigChannel+0x254>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d12b      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x23a>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a1c      	ldr	r2, [pc, #112]	; (8001d28 <HAL_ADC_ConfigChannel+0x258>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d003      	beq.n	8001cc4 <HAL_ADC_ConfigChannel+0x1f4>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b11      	cmp	r3, #17
 8001cc2:	d122      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a11      	ldr	r2, [pc, #68]	; (8001d28 <HAL_ADC_ConfigChannel+0x258>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d111      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <HAL_ADC_ConfigChannel+0x25c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a11      	ldr	r2, [pc, #68]	; (8001d30 <HAL_ADC_ConfigChannel+0x260>)
 8001cec:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf0:	0c9a      	lsrs	r2, r3, #18
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001cfc:	e002      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	3b01      	subs	r3, #1
 8001d02:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f9      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	40012300 	.word	0x40012300
 8001d24:	40012000 	.word	0x40012000
 8001d28:	10000012 	.word	0x10000012
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	431bde83 	.word	0x431bde83

08001d34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d3c:	4b79      	ldr	r3, [pc, #484]	; (8001f24 <ADC_Init+0x1f0>)
 8001d3e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	431a      	orrs	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6859      	ldr	r1, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	021a      	lsls	r2, r3, #8
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6859      	ldr	r1, [r3, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6899      	ldr	r1, [r3, #8]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc6:	4a58      	ldr	r2, [pc, #352]	; (8001f28 <ADC_Init+0x1f4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d022      	beq.n	8001e12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dda:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6899      	ldr	r1, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6899      	ldr	r1, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	e00f      	b.n	8001e32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e30:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0202 	bic.w	r2, r2, #2
 8001e40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6899      	ldr	r1, [r3, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	7e1b      	ldrb	r3, [r3, #24]
 8001e4c:	005a      	lsls	r2, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d01b      	beq.n	8001e98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e6e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6859      	ldr	r1, [r3, #4]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	035a      	lsls	r2, r3, #13
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	e007      	b.n	8001ea8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ea6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	051a      	lsls	r2, r3, #20
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001edc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6899      	ldr	r1, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001eea:	025a      	lsls	r2, r3, #9
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6899      	ldr	r1, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	029a      	lsls	r2, r3, #10
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	609a      	str	r2, [r3, #8]
}
 8001f18:	bf00      	nop
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	40012300 	.word	0x40012300
 8001f28:	0f000001 	.word	0x0f000001

08001f2c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f50:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <__NVIC_SetPriorityGrouping+0x44>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f72:	4a04      	ldr	r2, [pc, #16]	; (8001f84 <__NVIC_SetPriorityGrouping+0x44>)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	60d3      	str	r3, [r2, #12]
}
 8001f78:	bf00      	nop
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f8c:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	0a1b      	lsrs	r3, r3, #8
 8001f92:	f003 0307 	and.w	r3, r3, #7
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	db0b      	blt.n	8001fce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	f003 021f 	and.w	r2, r3, #31
 8001fbc:	4907      	ldr	r1, [pc, #28]	; (8001fdc <__NVIC_EnableIRQ+0x38>)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	095b      	lsrs	r3, r3, #5
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	e000e100 	.word	0xe000e100

08001fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	6039      	str	r1, [r7, #0]
 8001fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	db0a      	blt.n	800200a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	490c      	ldr	r1, [pc, #48]	; (800202c <__NVIC_SetPriority+0x4c>)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	0112      	lsls	r2, r2, #4
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	440b      	add	r3, r1
 8002004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002008:	e00a      	b.n	8002020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	b2da      	uxtb	r2, r3
 800200e:	4908      	ldr	r1, [pc, #32]	; (8002030 <__NVIC_SetPriority+0x50>)
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	3b04      	subs	r3, #4
 8002018:	0112      	lsls	r2, r2, #4
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	440b      	add	r3, r1
 800201e:	761a      	strb	r2, [r3, #24]
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	e000e100 	.word	0xe000e100
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002034:	b480      	push	{r7}
 8002036:	b089      	sub	sp, #36	; 0x24
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f1c3 0307 	rsb	r3, r3, #7
 800204e:	2b04      	cmp	r3, #4
 8002050:	bf28      	it	cs
 8002052:	2304      	movcs	r3, #4
 8002054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	3304      	adds	r3, #4
 800205a:	2b06      	cmp	r3, #6
 800205c:	d902      	bls.n	8002064 <NVIC_EncodePriority+0x30>
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3b03      	subs	r3, #3
 8002062:	e000      	b.n	8002066 <NVIC_EncodePriority+0x32>
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002068:	f04f 32ff 	mov.w	r2, #4294967295
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43da      	mvns	r2, r3
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	401a      	ands	r2, r3
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800207c:	f04f 31ff 	mov.w	r1, #4294967295
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	fa01 f303 	lsl.w	r3, r1, r3
 8002086:	43d9      	mvns	r1, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800208c:	4313      	orrs	r3, r2
         );
}
 800208e:	4618      	mov	r0, r3
 8002090:	3724      	adds	r7, #36	; 0x24
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
	...

0800209c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020ac:	d301      	bcc.n	80020b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ae:	2301      	movs	r3, #1
 80020b0:	e00f      	b.n	80020d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020b2:	4a0a      	ldr	r2, [pc, #40]	; (80020dc <SysTick_Config+0x40>)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ba:	210f      	movs	r1, #15
 80020bc:	f04f 30ff 	mov.w	r0, #4294967295
 80020c0:	f7ff ff8e 	bl	8001fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c4:	4b05      	ldr	r3, [pc, #20]	; (80020dc <SysTick_Config+0x40>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ca:	4b04      	ldr	r3, [pc, #16]	; (80020dc <SysTick_Config+0x40>)
 80020cc:	2207      	movs	r2, #7
 80020ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	e000e010 	.word	0xe000e010

080020e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff ff29 	bl	8001f40 <__NVIC_SetPriorityGrouping>
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b086      	sub	sp, #24
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	4603      	mov	r3, r0
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	607a      	str	r2, [r7, #4]
 8002102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002108:	f7ff ff3e 	bl	8001f88 <__NVIC_GetPriorityGrouping>
 800210c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68b9      	ldr	r1, [r7, #8]
 8002112:	6978      	ldr	r0, [r7, #20]
 8002114:	f7ff ff8e 	bl	8002034 <NVIC_EncodePriority>
 8002118:	4602      	mov	r2, r0
 800211a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211e:	4611      	mov	r1, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff5d 	bl	8001fe0 <__NVIC_SetPriority>
}
 8002126:	bf00      	nop
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	4603      	mov	r3, r0
 8002136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff31 	bl	8001fa4 <__NVIC_EnableIRQ>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff ffa2 	bl	800209c <SysTick_Config>
 8002158:	4603      	mov	r3, r0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002164:	b480      	push	{r7}
 8002166:	b089      	sub	sp, #36	; 0x24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
 800217e:	e159      	b.n	8002434 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002180:	2201      	movs	r2, #1
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	429a      	cmp	r2, r3
 800219a:	f040 8148 	bne.w	800242e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d005      	beq.n	80021b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d130      	bne.n	8002218 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	2203      	movs	r2, #3
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021ec:	2201      	movs	r2, #1
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	f003 0201 	and.w	r2, r3, #1
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	2b03      	cmp	r3, #3
 8002222:	d017      	beq.n	8002254 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	2203      	movs	r2, #3
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d123      	bne.n	80022a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	08da      	lsrs	r2, r3, #3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3208      	adds	r2, #8
 8002268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	220f      	movs	r2, #15
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	08da      	lsrs	r2, r3, #3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3208      	adds	r2, #8
 80022a2:	69b9      	ldr	r1, [r7, #24]
 80022a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	2203      	movs	r2, #3
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0203 	and.w	r2, r3, #3
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 80a2 	beq.w	800242e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	4b57      	ldr	r3, [pc, #348]	; (800244c <HAL_GPIO_Init+0x2e8>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	4a56      	ldr	r2, [pc, #344]	; (800244c <HAL_GPIO_Init+0x2e8>)
 80022f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022f8:	6453      	str	r3, [r2, #68]	; 0x44
 80022fa:	4b54      	ldr	r3, [pc, #336]	; (800244c <HAL_GPIO_Init+0x2e8>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002306:	4a52      	ldr	r2, [pc, #328]	; (8002450 <HAL_GPIO_Init+0x2ec>)
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	3302      	adds	r3, #2
 800230e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	220f      	movs	r2, #15
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a49      	ldr	r2, [pc, #292]	; (8002454 <HAL_GPIO_Init+0x2f0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d019      	beq.n	8002366 <HAL_GPIO_Init+0x202>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a48      	ldr	r2, [pc, #288]	; (8002458 <HAL_GPIO_Init+0x2f4>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d013      	beq.n	8002362 <HAL_GPIO_Init+0x1fe>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a47      	ldr	r2, [pc, #284]	; (800245c <HAL_GPIO_Init+0x2f8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d00d      	beq.n	800235e <HAL_GPIO_Init+0x1fa>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a46      	ldr	r2, [pc, #280]	; (8002460 <HAL_GPIO_Init+0x2fc>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d007      	beq.n	800235a <HAL_GPIO_Init+0x1f6>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a45      	ldr	r2, [pc, #276]	; (8002464 <HAL_GPIO_Init+0x300>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d101      	bne.n	8002356 <HAL_GPIO_Init+0x1f2>
 8002352:	2304      	movs	r3, #4
 8002354:	e008      	b.n	8002368 <HAL_GPIO_Init+0x204>
 8002356:	2307      	movs	r3, #7
 8002358:	e006      	b.n	8002368 <HAL_GPIO_Init+0x204>
 800235a:	2303      	movs	r3, #3
 800235c:	e004      	b.n	8002368 <HAL_GPIO_Init+0x204>
 800235e:	2302      	movs	r3, #2
 8002360:	e002      	b.n	8002368 <HAL_GPIO_Init+0x204>
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <HAL_GPIO_Init+0x204>
 8002366:	2300      	movs	r3, #0
 8002368:	69fa      	ldr	r2, [r7, #28]
 800236a:	f002 0203 	and.w	r2, r2, #3
 800236e:	0092      	lsls	r2, r2, #2
 8002370:	4093      	lsls	r3, r2
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002378:	4935      	ldr	r1, [pc, #212]	; (8002450 <HAL_GPIO_Init+0x2ec>)
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	089b      	lsrs	r3, r3, #2
 800237e:	3302      	adds	r3, #2
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002386:	4b38      	ldr	r3, [pc, #224]	; (8002468 <HAL_GPIO_Init+0x304>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023aa:	4a2f      	ldr	r2, [pc, #188]	; (8002468 <HAL_GPIO_Init+0x304>)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023b0:	4b2d      	ldr	r3, [pc, #180]	; (8002468 <HAL_GPIO_Init+0x304>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023d4:	4a24      	ldr	r2, [pc, #144]	; (8002468 <HAL_GPIO_Init+0x304>)
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023da:	4b23      	ldr	r3, [pc, #140]	; (8002468 <HAL_GPIO_Init+0x304>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023fe:	4a1a      	ldr	r2, [pc, #104]	; (8002468 <HAL_GPIO_Init+0x304>)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002404:	4b18      	ldr	r3, [pc, #96]	; (8002468 <HAL_GPIO_Init+0x304>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002428:	4a0f      	ldr	r2, [pc, #60]	; (8002468 <HAL_GPIO_Init+0x304>)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3301      	adds	r3, #1
 8002432:	61fb      	str	r3, [r7, #28]
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	2b0f      	cmp	r3, #15
 8002438:	f67f aea2 	bls.w	8002180 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800243c:	bf00      	nop
 800243e:	bf00      	nop
 8002440:	3724      	adds	r7, #36	; 0x24
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40023800 	.word	0x40023800
 8002450:	40013800 	.word	0x40013800
 8002454:	40020000 	.word	0x40020000
 8002458:	40020400 	.word	0x40020400
 800245c:	40020800 	.word	0x40020800
 8002460:	40020c00 	.word	0x40020c00
 8002464:	40021000 	.word	0x40021000
 8002468:	40013c00 	.word	0x40013c00

0800246c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	460b      	mov	r3, r1
 8002476:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691a      	ldr	r2, [r3, #16]
 800247c:	887b      	ldrh	r3, [r7, #2]
 800247e:	4013      	ands	r3, r2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002484:	2301      	movs	r3, #1
 8002486:	73fb      	strb	r3, [r7, #15]
 8002488:	e001      	b.n	800248e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800248a:	2300      	movs	r3, #0
 800248c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800248e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	807b      	strh	r3, [r7, #2]
 80024a8:	4613      	mov	r3, r2
 80024aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024ac:	787b      	ldrb	r3, [r7, #1]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024b2:	887a      	ldrh	r2, [r7, #2]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024b8:	e003      	b.n	80024c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024ba:	887b      	ldrh	r3, [r7, #2]
 80024bc:	041a      	lsls	r2, r3, #16
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	619a      	str	r2, [r3, #24]
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
	...

080024d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e267      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d075      	beq.n	80025da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ee:	4b88      	ldr	r3, [pc, #544]	; (8002710 <HAL_RCC_OscConfig+0x240>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d00c      	beq.n	8002514 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024fa:	4b85      	ldr	r3, [pc, #532]	; (8002710 <HAL_RCC_OscConfig+0x240>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002502:	2b08      	cmp	r3, #8
 8002504:	d112      	bne.n	800252c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002506:	4b82      	ldr	r3, [pc, #520]	; (8002710 <HAL_RCC_OscConfig+0x240>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800250e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002512:	d10b      	bne.n	800252c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002514:	4b7e      	ldr	r3, [pc, #504]	; (8002710 <HAL_RCC_OscConfig+0x240>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d05b      	beq.n	80025d8 <HAL_RCC_OscConfig+0x108>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d157      	bne.n	80025d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e242      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002534:	d106      	bne.n	8002544 <HAL_RCC_OscConfig+0x74>
 8002536:	4b76      	ldr	r3, [pc, #472]	; (8002710 <HAL_RCC_OscConfig+0x240>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a75      	ldr	r2, [pc, #468]	; (8002710 <HAL_RCC_OscConfig+0x240>)
 800253c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	e01d      	b.n	8002580 <HAL_RCC_OscConfig+0xb0>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0x98>
 800254e:	4b70      	ldr	r3, [pc, #448]	; (8002710 <HAL_RCC_OscConfig+0x240>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a6f      	ldr	r2, [pc, #444]	; (8002710 <HAL_RCC_OscConfig+0x240>)
 8002554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	4b6d      	ldr	r3, [pc, #436]	; (8002710 <HAL_RCC_OscConfig+0x240>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a6c      	ldr	r2, [pc, #432]	; (8002710 <HAL_RCC_OscConfig+0x240>)
 8002560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	e00b      	b.n	8002580 <HAL_RCC_OscConfig+0xb0>
 8002568:	4b69      	ldr	r3, [pc, #420]	; (8002710 <HAL_RCC_OscConfig+0x240>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a68      	ldr	r2, [pc, #416]	; (8002710 <HAL_RCC_OscConfig+0x240>)
 800256e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	4b66      	ldr	r3, [pc, #408]	; (8002710 <HAL_RCC_OscConfig+0x240>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a65      	ldr	r2, [pc, #404]	; (8002710 <HAL_RCC_OscConfig+0x240>)
 800257a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800257e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d013      	beq.n	80025b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7ff f83e 	bl	8001608 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002590:	f7ff f83a 	bl	8001608 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	; 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e207      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a2:	4b5b      	ldr	r3, [pc, #364]	; (8002710 <HAL_RCC_OscConfig+0x240>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f0      	beq.n	8002590 <HAL_RCC_OscConfig+0xc0>
 80025ae:	e014      	b.n	80025da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b0:	f7ff f82a 	bl	8001608 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025b8:	f7ff f826 	bl	8001608 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b64      	cmp	r3, #100	; 0x64
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e1f3      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ca:	4b51      	ldr	r3, [pc, #324]	; (8002710 <HAL_RCC_OscConfig+0x240>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0xe8>
 80025d6:	e000      	b.n	80025da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d063      	beq.n	80026ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025e6:	4b4a      	ldr	r3, [pc, #296]	; (8002710 <HAL_RCC_OscConfig+0x240>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 030c 	and.w	r3, r3, #12
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00b      	beq.n	800260a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025f2:	4b47      	ldr	r3, [pc, #284]	; (8002710 <HAL_RCC_OscConfig+0x240>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	d11c      	bne.n	8002638 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025fe:	4b44      	ldr	r3, [pc, #272]	; (8002710 <HAL_RCC_OscConfig+0x240>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d116      	bne.n	8002638 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260a:	4b41      	ldr	r3, [pc, #260]	; (8002710 <HAL_RCC_OscConfig+0x240>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d005      	beq.n	8002622 <HAL_RCC_OscConfig+0x152>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d001      	beq.n	8002622 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e1c7      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002622:	4b3b      	ldr	r3, [pc, #236]	; (8002710 <HAL_RCC_OscConfig+0x240>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4937      	ldr	r1, [pc, #220]	; (8002710 <HAL_RCC_OscConfig+0x240>)
 8002632:	4313      	orrs	r3, r2
 8002634:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002636:	e03a      	b.n	80026ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d020      	beq.n	8002682 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002640:	4b34      	ldr	r3, [pc, #208]	; (8002714 <HAL_RCC_OscConfig+0x244>)
 8002642:	2201      	movs	r2, #1
 8002644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002646:	f7fe ffdf 	bl	8001608 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800264e:	f7fe ffdb 	bl	8001608 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e1a8      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002660:	4b2b      	ldr	r3, [pc, #172]	; (8002710 <HAL_RCC_OscConfig+0x240>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0f0      	beq.n	800264e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266c:	4b28      	ldr	r3, [pc, #160]	; (8002710 <HAL_RCC_OscConfig+0x240>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	4925      	ldr	r1, [pc, #148]	; (8002710 <HAL_RCC_OscConfig+0x240>)
 800267c:	4313      	orrs	r3, r2
 800267e:	600b      	str	r3, [r1, #0]
 8002680:	e015      	b.n	80026ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002682:	4b24      	ldr	r3, [pc, #144]	; (8002714 <HAL_RCC_OscConfig+0x244>)
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002688:	f7fe ffbe 	bl	8001608 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002690:	f7fe ffba 	bl	8001608 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e187      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026a2:	4b1b      	ldr	r3, [pc, #108]	; (8002710 <HAL_RCC_OscConfig+0x240>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d036      	beq.n	8002728 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d016      	beq.n	80026f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026c2:	4b15      	ldr	r3, [pc, #84]	; (8002718 <HAL_RCC_OscConfig+0x248>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c8:	f7fe ff9e 	bl	8001608 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026d0:	f7fe ff9a 	bl	8001608 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e167      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e2:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <HAL_RCC_OscConfig+0x240>)
 80026e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0x200>
 80026ee:	e01b      	b.n	8002728 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <HAL_RCC_OscConfig+0x248>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f6:	f7fe ff87 	bl	8001608 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026fc:	e00e      	b.n	800271c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026fe:	f7fe ff83 	bl	8001608 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d907      	bls.n	800271c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e150      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
 8002710:	40023800 	.word	0x40023800
 8002714:	42470000 	.word	0x42470000
 8002718:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800271c:	4b88      	ldr	r3, [pc, #544]	; (8002940 <HAL_RCC_OscConfig+0x470>)
 800271e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1ea      	bne.n	80026fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 8097 	beq.w	8002864 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002736:	2300      	movs	r3, #0
 8002738:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800273a:	4b81      	ldr	r3, [pc, #516]	; (8002940 <HAL_RCC_OscConfig+0x470>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10f      	bne.n	8002766 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	4b7d      	ldr	r3, [pc, #500]	; (8002940 <HAL_RCC_OscConfig+0x470>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	4a7c      	ldr	r2, [pc, #496]	; (8002940 <HAL_RCC_OscConfig+0x470>)
 8002750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002754:	6413      	str	r3, [r2, #64]	; 0x40
 8002756:	4b7a      	ldr	r3, [pc, #488]	; (8002940 <HAL_RCC_OscConfig+0x470>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002762:	2301      	movs	r3, #1
 8002764:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002766:	4b77      	ldr	r3, [pc, #476]	; (8002944 <HAL_RCC_OscConfig+0x474>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276e:	2b00      	cmp	r3, #0
 8002770:	d118      	bne.n	80027a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002772:	4b74      	ldr	r3, [pc, #464]	; (8002944 <HAL_RCC_OscConfig+0x474>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a73      	ldr	r2, [pc, #460]	; (8002944 <HAL_RCC_OscConfig+0x474>)
 8002778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800277e:	f7fe ff43 	bl	8001608 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002786:	f7fe ff3f 	bl	8001608 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e10c      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002798:	4b6a      	ldr	r3, [pc, #424]	; (8002944 <HAL_RCC_OscConfig+0x474>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0f0      	beq.n	8002786 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d106      	bne.n	80027ba <HAL_RCC_OscConfig+0x2ea>
 80027ac:	4b64      	ldr	r3, [pc, #400]	; (8002940 <HAL_RCC_OscConfig+0x470>)
 80027ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b0:	4a63      	ldr	r2, [pc, #396]	; (8002940 <HAL_RCC_OscConfig+0x470>)
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	6713      	str	r3, [r2, #112]	; 0x70
 80027b8:	e01c      	b.n	80027f4 <HAL_RCC_OscConfig+0x324>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2b05      	cmp	r3, #5
 80027c0:	d10c      	bne.n	80027dc <HAL_RCC_OscConfig+0x30c>
 80027c2:	4b5f      	ldr	r3, [pc, #380]	; (8002940 <HAL_RCC_OscConfig+0x470>)
 80027c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c6:	4a5e      	ldr	r2, [pc, #376]	; (8002940 <HAL_RCC_OscConfig+0x470>)
 80027c8:	f043 0304 	orr.w	r3, r3, #4
 80027cc:	6713      	str	r3, [r2, #112]	; 0x70
 80027ce:	4b5c      	ldr	r3, [pc, #368]	; (8002940 <HAL_RCC_OscConfig+0x470>)
 80027d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d2:	4a5b      	ldr	r2, [pc, #364]	; (8002940 <HAL_RCC_OscConfig+0x470>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	6713      	str	r3, [r2, #112]	; 0x70
 80027da:	e00b      	b.n	80027f4 <HAL_RCC_OscConfig+0x324>
 80027dc:	4b58      	ldr	r3, [pc, #352]	; (8002940 <HAL_RCC_OscConfig+0x470>)
 80027de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e0:	4a57      	ldr	r2, [pc, #348]	; (8002940 <HAL_RCC_OscConfig+0x470>)
 80027e2:	f023 0301 	bic.w	r3, r3, #1
 80027e6:	6713      	str	r3, [r2, #112]	; 0x70
 80027e8:	4b55      	ldr	r3, [pc, #340]	; (8002940 <HAL_RCC_OscConfig+0x470>)
 80027ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ec:	4a54      	ldr	r2, [pc, #336]	; (8002940 <HAL_RCC_OscConfig+0x470>)
 80027ee:	f023 0304 	bic.w	r3, r3, #4
 80027f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d015      	beq.n	8002828 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fc:	f7fe ff04 	bl	8001608 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002802:	e00a      	b.n	800281a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002804:	f7fe ff00 	bl	8001608 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002812:	4293      	cmp	r3, r2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e0cb      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281a:	4b49      	ldr	r3, [pc, #292]	; (8002940 <HAL_RCC_OscConfig+0x470>)
 800281c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0ee      	beq.n	8002804 <HAL_RCC_OscConfig+0x334>
 8002826:	e014      	b.n	8002852 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002828:	f7fe feee 	bl	8001608 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800282e:	e00a      	b.n	8002846 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002830:	f7fe feea 	bl	8001608 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	f241 3288 	movw	r2, #5000	; 0x1388
 800283e:	4293      	cmp	r3, r2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e0b5      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002846:	4b3e      	ldr	r3, [pc, #248]	; (8002940 <HAL_RCC_OscConfig+0x470>)
 8002848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1ee      	bne.n	8002830 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002852:	7dfb      	ldrb	r3, [r7, #23]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d105      	bne.n	8002864 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002858:	4b39      	ldr	r3, [pc, #228]	; (8002940 <HAL_RCC_OscConfig+0x470>)
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	4a38      	ldr	r2, [pc, #224]	; (8002940 <HAL_RCC_OscConfig+0x470>)
 800285e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002862:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 80a1 	beq.w	80029b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800286e:	4b34      	ldr	r3, [pc, #208]	; (8002940 <HAL_RCC_OscConfig+0x470>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 030c 	and.w	r3, r3, #12
 8002876:	2b08      	cmp	r3, #8
 8002878:	d05c      	beq.n	8002934 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d141      	bne.n	8002906 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002882:	4b31      	ldr	r3, [pc, #196]	; (8002948 <HAL_RCC_OscConfig+0x478>)
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002888:	f7fe febe 	bl	8001608 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002890:	f7fe feba 	bl	8001608 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e087      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a2:	4b27      	ldr	r3, [pc, #156]	; (8002940 <HAL_RCC_OscConfig+0x470>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69da      	ldr	r2, [r3, #28]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	019b      	lsls	r3, r3, #6
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c4:	085b      	lsrs	r3, r3, #1
 80028c6:	3b01      	subs	r3, #1
 80028c8:	041b      	lsls	r3, r3, #16
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d0:	061b      	lsls	r3, r3, #24
 80028d2:	491b      	ldr	r1, [pc, #108]	; (8002940 <HAL_RCC_OscConfig+0x470>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d8:	4b1b      	ldr	r3, [pc, #108]	; (8002948 <HAL_RCC_OscConfig+0x478>)
 80028da:	2201      	movs	r2, #1
 80028dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028de:	f7fe fe93 	bl	8001608 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e6:	f7fe fe8f 	bl	8001608 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e05c      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f8:	4b11      	ldr	r3, [pc, #68]	; (8002940 <HAL_RCC_OscConfig+0x470>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0f0      	beq.n	80028e6 <HAL_RCC_OscConfig+0x416>
 8002904:	e054      	b.n	80029b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002906:	4b10      	ldr	r3, [pc, #64]	; (8002948 <HAL_RCC_OscConfig+0x478>)
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290c:	f7fe fe7c 	bl	8001608 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002914:	f7fe fe78 	bl	8001608 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e045      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002926:	4b06      	ldr	r3, [pc, #24]	; (8002940 <HAL_RCC_OscConfig+0x470>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x444>
 8002932:	e03d      	b.n	80029b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d107      	bne.n	800294c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e038      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
 8002940:	40023800 	.word	0x40023800
 8002944:	40007000 	.word	0x40007000
 8002948:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800294c:	4b1b      	ldr	r3, [pc, #108]	; (80029bc <HAL_RCC_OscConfig+0x4ec>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d028      	beq.n	80029ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002964:	429a      	cmp	r2, r3
 8002966:	d121      	bne.n	80029ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002972:	429a      	cmp	r2, r3
 8002974:	d11a      	bne.n	80029ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800297c:	4013      	ands	r3, r2
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002982:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002984:	4293      	cmp	r3, r2
 8002986:	d111      	bne.n	80029ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002992:	085b      	lsrs	r3, r3, #1
 8002994:	3b01      	subs	r3, #1
 8002996:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002998:	429a      	cmp	r2, r3
 800299a:	d107      	bne.n	80029ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d001      	beq.n	80029b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e000      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40023800 	.word	0x40023800

080029c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0cc      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029d4:	4b68      	ldr	r3, [pc, #416]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d90c      	bls.n	80029fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e2:	4b65      	ldr	r3, [pc, #404]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ea:	4b63      	ldr	r3, [pc, #396]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e0b8      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d020      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a14:	4b59      	ldr	r3, [pc, #356]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	4a58      	ldr	r2, [pc, #352]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a2c:	4b53      	ldr	r3, [pc, #332]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	4a52      	ldr	r2, [pc, #328]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a38:	4b50      	ldr	r3, [pc, #320]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	494d      	ldr	r1, [pc, #308]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d044      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d107      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5e:	4b47      	ldr	r3, [pc, #284]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d119      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e07f      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d003      	beq.n	8002a7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a7a:	2b03      	cmp	r3, #3
 8002a7c:	d107      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7e:	4b3f      	ldr	r3, [pc, #252]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d109      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e06f      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8e:	4b3b      	ldr	r3, [pc, #236]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e067      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a9e:	4b37      	ldr	r3, [pc, #220]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f023 0203 	bic.w	r2, r3, #3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	4934      	ldr	r1, [pc, #208]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ab0:	f7fe fdaa 	bl	8001608 <HAL_GetTick>
 8002ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab6:	e00a      	b.n	8002ace <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab8:	f7fe fda6 	bl	8001608 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e04f      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ace:	4b2b      	ldr	r3, [pc, #172]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 020c 	and.w	r2, r3, #12
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d1eb      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae0:	4b25      	ldr	r3, [pc, #148]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d20c      	bcs.n	8002b08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4b22      	ldr	r3, [pc, #136]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	4b20      	ldr	r3, [pc, #128]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e032      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b14:	4b19      	ldr	r3, [pc, #100]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4916      	ldr	r1, [pc, #88]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d009      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b32:	4b12      	ldr	r3, [pc, #72]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	490e      	ldr	r1, [pc, #56]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b46:	f000 f821 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	091b      	lsrs	r3, r3, #4
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	490a      	ldr	r1, [pc, #40]	; (8002b80 <HAL_RCC_ClockConfig+0x1c0>)
 8002b58:	5ccb      	ldrb	r3, [r1, r3]
 8002b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5e:	4a09      	ldr	r2, [pc, #36]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b62:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <HAL_RCC_ClockConfig+0x1c8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe fd0a 	bl	8001580 <HAL_InitTick>

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40023c00 	.word	0x40023c00
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	08004308 	.word	0x08004308
 8002b84:	20000000 	.word	0x20000000
 8002b88:	20000004 	.word	0x20000004

08002b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b90:	b090      	sub	sp, #64	; 0x40
 8002b92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	637b      	str	r3, [r7, #52]	; 0x34
 8002b98:	2300      	movs	r3, #0
 8002b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ba4:	4b59      	ldr	r3, [pc, #356]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d00d      	beq.n	8002bcc <HAL_RCC_GetSysClockFreq+0x40>
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	f200 80a1 	bhi.w	8002cf8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d002      	beq.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x34>
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d003      	beq.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bbe:	e09b      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bc0:	4b53      	ldr	r3, [pc, #332]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bc2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002bc4:	e09b      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bc6:	4b53      	ldr	r3, [pc, #332]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bc8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bca:	e098      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bcc:	4b4f      	ldr	r3, [pc, #316]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bd4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bd6:	4b4d      	ldr	r3, [pc, #308]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d028      	beq.n	8002c34 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002be2:	4b4a      	ldr	r3, [pc, #296]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	099b      	lsrs	r3, r3, #6
 8002be8:	2200      	movs	r2, #0
 8002bea:	623b      	str	r3, [r7, #32]
 8002bec:	627a      	str	r2, [r7, #36]	; 0x24
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4b47      	ldr	r3, [pc, #284]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bf8:	fb03 f201 	mul.w	r2, r3, r1
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	fb00 f303 	mul.w	r3, r0, r3
 8002c02:	4413      	add	r3, r2
 8002c04:	4a43      	ldr	r2, [pc, #268]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c06:	fba0 1202 	umull	r1, r2, r0, r2
 8002c0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c0c:	460a      	mov	r2, r1
 8002c0e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c12:	4413      	add	r3, r2
 8002c14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c18:	2200      	movs	r2, #0
 8002c1a:	61bb      	str	r3, [r7, #24]
 8002c1c:	61fa      	str	r2, [r7, #28]
 8002c1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c26:	f7fd fe39 	bl	800089c <__aeabi_uldivmod>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4613      	mov	r3, r2
 8002c30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c32:	e053      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c34:	4b35      	ldr	r3, [pc, #212]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	099b      	lsrs	r3, r3, #6
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	617a      	str	r2, [r7, #20]
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c46:	f04f 0b00 	mov.w	fp, #0
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	465b      	mov	r3, fp
 8002c4e:	f04f 0000 	mov.w	r0, #0
 8002c52:	f04f 0100 	mov.w	r1, #0
 8002c56:	0159      	lsls	r1, r3, #5
 8002c58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c5c:	0150      	lsls	r0, r2, #5
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	ebb2 080a 	subs.w	r8, r2, sl
 8002c66:	eb63 090b 	sbc.w	r9, r3, fp
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	f04f 0300 	mov.w	r3, #0
 8002c72:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c76:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c7a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c7e:	ebb2 0408 	subs.w	r4, r2, r8
 8002c82:	eb63 0509 	sbc.w	r5, r3, r9
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	f04f 0300 	mov.w	r3, #0
 8002c8e:	00eb      	lsls	r3, r5, #3
 8002c90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c94:	00e2      	lsls	r2, r4, #3
 8002c96:	4614      	mov	r4, r2
 8002c98:	461d      	mov	r5, r3
 8002c9a:	eb14 030a 	adds.w	r3, r4, sl
 8002c9e:	603b      	str	r3, [r7, #0]
 8002ca0:	eb45 030b 	adc.w	r3, r5, fp
 8002ca4:	607b      	str	r3, [r7, #4]
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cb2:	4629      	mov	r1, r5
 8002cb4:	028b      	lsls	r3, r1, #10
 8002cb6:	4621      	mov	r1, r4
 8002cb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cbc:	4621      	mov	r1, r4
 8002cbe:	028a      	lsls	r2, r1, #10
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	60fa      	str	r2, [r7, #12]
 8002ccc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cd0:	f7fd fde4 	bl	800089c <__aeabi_uldivmod>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4613      	mov	r3, r2
 8002cda:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	0c1b      	lsrs	r3, r3, #16
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002cec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cf6:	e002      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cfa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3740      	adds	r7, #64	; 0x40
 8002d04:	46bd      	mov	sp, r7
 8002d06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	00f42400 	.word	0x00f42400
 8002d14:	017d7840 	.word	0x017d7840

08002d18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d1c:	4b03      	ldr	r3, [pc, #12]	; (8002d2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	20000000 	.word	0x20000000

08002d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d34:	f7ff fff0 	bl	8002d18 <HAL_RCC_GetHCLKFreq>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	0a9b      	lsrs	r3, r3, #10
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	4903      	ldr	r1, [pc, #12]	; (8002d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d46:	5ccb      	ldrb	r3, [r1, r3]
 8002d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40023800 	.word	0x40023800
 8002d54:	08004318 	.word	0x08004318

08002d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d5c:	f7ff ffdc 	bl	8002d18 <HAL_RCC_GetHCLKFreq>
 8002d60:	4602      	mov	r2, r0
 8002d62:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	0b5b      	lsrs	r3, r3, #13
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	4903      	ldr	r1, [pc, #12]	; (8002d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d6e:	5ccb      	ldrb	r3, [r1, r3]
 8002d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	08004318 	.word	0x08004318

08002d80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e042      	b.n	8002e18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7fe fada 	bl	8001360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2224      	movs	r2, #36	; 0x24
 8002db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f973 	bl	80030b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695a      	ldr	r2, [r3, #20]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002de8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68da      	ldr	r2, [r3, #12]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002df8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08a      	sub	sp, #40	; 0x28
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	603b      	str	r3, [r7, #0]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d175      	bne.n	8002f2c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <HAL_UART_Transmit+0x2c>
 8002e46:	88fb      	ldrh	r3, [r7, #6]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e06e      	b.n	8002f2e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2221      	movs	r2, #33	; 0x21
 8002e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e5e:	f7fe fbd3 	bl	8001608 <HAL_GetTick>
 8002e62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	88fa      	ldrh	r2, [r7, #6]
 8002e68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	88fa      	ldrh	r2, [r7, #6]
 8002e6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e78:	d108      	bne.n	8002e8c <HAL_UART_Transmit+0x6c>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d104      	bne.n	8002e8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	61bb      	str	r3, [r7, #24]
 8002e8a:	e003      	b.n	8002e94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e94:	e02e      	b.n	8002ef4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2180      	movs	r1, #128	; 0x80
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 f848 	bl	8002f36 <UART_WaitOnFlagUntilTimeout>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e03a      	b.n	8002f2e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10b      	bne.n	8002ed6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ecc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	3302      	adds	r3, #2
 8002ed2:	61bb      	str	r3, [r7, #24]
 8002ed4:	e007      	b.n	8002ee6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	781a      	ldrb	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	3b01      	subs	r3, #1
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1cb      	bne.n	8002e96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2200      	movs	r2, #0
 8002f06:	2140      	movs	r1, #64	; 0x40
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 f814 	bl	8002f36 <UART_WaitOnFlagUntilTimeout>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d005      	beq.n	8002f20 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e006      	b.n	8002f2e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	e000      	b.n	8002f2e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f2c:	2302      	movs	r3, #2
  }
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3720      	adds	r7, #32
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b086      	sub	sp, #24
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	603b      	str	r3, [r7, #0]
 8002f42:	4613      	mov	r3, r2
 8002f44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f46:	e03b      	b.n	8002fc0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4e:	d037      	beq.n	8002fc0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f50:	f7fe fb5a 	bl	8001608 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	6a3a      	ldr	r2, [r7, #32]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d302      	bcc.n	8002f66 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e03a      	b.n	8002fe0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d023      	beq.n	8002fc0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b80      	cmp	r3, #128	; 0x80
 8002f7c:	d020      	beq.n	8002fc0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b40      	cmp	r3, #64	; 0x40
 8002f82:	d01d      	beq.n	8002fc0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d116      	bne.n	8002fc0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002f92:	2300      	movs	r3, #0
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	617b      	str	r3, [r7, #20]
 8002fa6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 f81d 	bl	8002fe8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2208      	movs	r2, #8
 8002fb2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e00f      	b.n	8002fe0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	bf0c      	ite	eq
 8002fd0:	2301      	moveq	r3, #1
 8002fd2:	2300      	movne	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d0b4      	beq.n	8002f48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b095      	sub	sp, #84	; 0x54
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	330c      	adds	r3, #12
 8002ff6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ffa:	e853 3f00 	ldrex	r3, [r3]
 8002ffe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003002:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003006:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	330c      	adds	r3, #12
 800300e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003010:	643a      	str	r2, [r7, #64]	; 0x40
 8003012:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003014:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003016:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003018:	e841 2300 	strex	r3, r2, [r1]
 800301c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800301e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1e5      	bne.n	8002ff0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3314      	adds	r3, #20
 800302a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	e853 3f00 	ldrex	r3, [r3]
 8003032:	61fb      	str	r3, [r7, #28]
   return(result);
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f023 0301 	bic.w	r3, r3, #1
 800303a:	64bb      	str	r3, [r7, #72]	; 0x48
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3314      	adds	r3, #20
 8003042:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003044:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003046:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003048:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800304a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800304c:	e841 2300 	strex	r3, r2, [r1]
 8003050:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1e5      	bne.n	8003024 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305c:	2b01      	cmp	r3, #1
 800305e:	d119      	bne.n	8003094 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	330c      	adds	r3, #12
 8003066:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	e853 3f00 	ldrex	r3, [r3]
 800306e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f023 0310 	bic.w	r3, r3, #16
 8003076:	647b      	str	r3, [r7, #68]	; 0x44
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	330c      	adds	r3, #12
 800307e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003080:	61ba      	str	r2, [r7, #24]
 8003082:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003084:	6979      	ldr	r1, [r7, #20]
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	e841 2300 	strex	r3, r2, [r1]
 800308c:	613b      	str	r3, [r7, #16]
   return(result);
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1e5      	bne.n	8003060 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80030a2:	bf00      	nop
 80030a4:	3754      	adds	r7, #84	; 0x54
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
	...

080030b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030b4:	b0c0      	sub	sp, #256	; 0x100
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80030c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030cc:	68d9      	ldr	r1, [r3, #12]
 80030ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	ea40 0301 	orr.w	r3, r0, r1
 80030d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	431a      	orrs	r2, r3
 80030e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	431a      	orrs	r2, r3
 80030f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80030fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003108:	f021 010c 	bic.w	r1, r1, #12
 800310c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003116:	430b      	orrs	r3, r1
 8003118:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800311a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800312a:	6999      	ldr	r1, [r3, #24]
 800312c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	ea40 0301 	orr.w	r3, r0, r1
 8003136:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	4b8f      	ldr	r3, [pc, #572]	; (800337c <UART_SetConfig+0x2cc>)
 8003140:	429a      	cmp	r2, r3
 8003142:	d005      	beq.n	8003150 <UART_SetConfig+0xa0>
 8003144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	4b8d      	ldr	r3, [pc, #564]	; (8003380 <UART_SetConfig+0x2d0>)
 800314c:	429a      	cmp	r2, r3
 800314e:	d104      	bne.n	800315a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003150:	f7ff fe02 	bl	8002d58 <HAL_RCC_GetPCLK2Freq>
 8003154:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003158:	e003      	b.n	8003162 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800315a:	f7ff fde9 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 800315e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800316c:	f040 810c 	bne.w	8003388 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003170:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003174:	2200      	movs	r2, #0
 8003176:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800317a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800317e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003182:	4622      	mov	r2, r4
 8003184:	462b      	mov	r3, r5
 8003186:	1891      	adds	r1, r2, r2
 8003188:	65b9      	str	r1, [r7, #88]	; 0x58
 800318a:	415b      	adcs	r3, r3
 800318c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800318e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003192:	4621      	mov	r1, r4
 8003194:	eb12 0801 	adds.w	r8, r2, r1
 8003198:	4629      	mov	r1, r5
 800319a:	eb43 0901 	adc.w	r9, r3, r1
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	f04f 0300 	mov.w	r3, #0
 80031a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031b2:	4690      	mov	r8, r2
 80031b4:	4699      	mov	r9, r3
 80031b6:	4623      	mov	r3, r4
 80031b8:	eb18 0303 	adds.w	r3, r8, r3
 80031bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80031c0:	462b      	mov	r3, r5
 80031c2:	eb49 0303 	adc.w	r3, r9, r3
 80031c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80031ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80031d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80031da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80031de:	460b      	mov	r3, r1
 80031e0:	18db      	adds	r3, r3, r3
 80031e2:	653b      	str	r3, [r7, #80]	; 0x50
 80031e4:	4613      	mov	r3, r2
 80031e6:	eb42 0303 	adc.w	r3, r2, r3
 80031ea:	657b      	str	r3, [r7, #84]	; 0x54
 80031ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80031f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80031f4:	f7fd fb52 	bl	800089c <__aeabi_uldivmod>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	4b61      	ldr	r3, [pc, #388]	; (8003384 <UART_SetConfig+0x2d4>)
 80031fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003202:	095b      	lsrs	r3, r3, #5
 8003204:	011c      	lsls	r4, r3, #4
 8003206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800320a:	2200      	movs	r2, #0
 800320c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003210:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003214:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003218:	4642      	mov	r2, r8
 800321a:	464b      	mov	r3, r9
 800321c:	1891      	adds	r1, r2, r2
 800321e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003220:	415b      	adcs	r3, r3
 8003222:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003224:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003228:	4641      	mov	r1, r8
 800322a:	eb12 0a01 	adds.w	sl, r2, r1
 800322e:	4649      	mov	r1, r9
 8003230:	eb43 0b01 	adc.w	fp, r3, r1
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003240:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003244:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003248:	4692      	mov	sl, r2
 800324a:	469b      	mov	fp, r3
 800324c:	4643      	mov	r3, r8
 800324e:	eb1a 0303 	adds.w	r3, sl, r3
 8003252:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003256:	464b      	mov	r3, r9
 8003258:	eb4b 0303 	adc.w	r3, fp, r3
 800325c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800326c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003270:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003274:	460b      	mov	r3, r1
 8003276:	18db      	adds	r3, r3, r3
 8003278:	643b      	str	r3, [r7, #64]	; 0x40
 800327a:	4613      	mov	r3, r2
 800327c:	eb42 0303 	adc.w	r3, r2, r3
 8003280:	647b      	str	r3, [r7, #68]	; 0x44
 8003282:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003286:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800328a:	f7fd fb07 	bl	800089c <__aeabi_uldivmod>
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	4611      	mov	r1, r2
 8003294:	4b3b      	ldr	r3, [pc, #236]	; (8003384 <UART_SetConfig+0x2d4>)
 8003296:	fba3 2301 	umull	r2, r3, r3, r1
 800329a:	095b      	lsrs	r3, r3, #5
 800329c:	2264      	movs	r2, #100	; 0x64
 800329e:	fb02 f303 	mul.w	r3, r2, r3
 80032a2:	1acb      	subs	r3, r1, r3
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80032aa:	4b36      	ldr	r3, [pc, #216]	; (8003384 <UART_SetConfig+0x2d4>)
 80032ac:	fba3 2302 	umull	r2, r3, r3, r2
 80032b0:	095b      	lsrs	r3, r3, #5
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032b8:	441c      	add	r4, r3
 80032ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032be:	2200      	movs	r2, #0
 80032c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80032c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80032cc:	4642      	mov	r2, r8
 80032ce:	464b      	mov	r3, r9
 80032d0:	1891      	adds	r1, r2, r2
 80032d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80032d4:	415b      	adcs	r3, r3
 80032d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80032dc:	4641      	mov	r1, r8
 80032de:	1851      	adds	r1, r2, r1
 80032e0:	6339      	str	r1, [r7, #48]	; 0x30
 80032e2:	4649      	mov	r1, r9
 80032e4:	414b      	adcs	r3, r1
 80032e6:	637b      	str	r3, [r7, #52]	; 0x34
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80032f4:	4659      	mov	r1, fp
 80032f6:	00cb      	lsls	r3, r1, #3
 80032f8:	4651      	mov	r1, sl
 80032fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032fe:	4651      	mov	r1, sl
 8003300:	00ca      	lsls	r2, r1, #3
 8003302:	4610      	mov	r0, r2
 8003304:	4619      	mov	r1, r3
 8003306:	4603      	mov	r3, r0
 8003308:	4642      	mov	r2, r8
 800330a:	189b      	adds	r3, r3, r2
 800330c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003310:	464b      	mov	r3, r9
 8003312:	460a      	mov	r2, r1
 8003314:	eb42 0303 	adc.w	r3, r2, r3
 8003318:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800331c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003328:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800332c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003330:	460b      	mov	r3, r1
 8003332:	18db      	adds	r3, r3, r3
 8003334:	62bb      	str	r3, [r7, #40]	; 0x28
 8003336:	4613      	mov	r3, r2
 8003338:	eb42 0303 	adc.w	r3, r2, r3
 800333c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800333e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003342:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003346:	f7fd faa9 	bl	800089c <__aeabi_uldivmod>
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <UART_SetConfig+0x2d4>)
 8003350:	fba3 1302 	umull	r1, r3, r3, r2
 8003354:	095b      	lsrs	r3, r3, #5
 8003356:	2164      	movs	r1, #100	; 0x64
 8003358:	fb01 f303 	mul.w	r3, r1, r3
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	3332      	adds	r3, #50	; 0x32
 8003362:	4a08      	ldr	r2, [pc, #32]	; (8003384 <UART_SetConfig+0x2d4>)
 8003364:	fba2 2303 	umull	r2, r3, r2, r3
 8003368:	095b      	lsrs	r3, r3, #5
 800336a:	f003 0207 	and.w	r2, r3, #7
 800336e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4422      	add	r2, r4
 8003376:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003378:	e106      	b.n	8003588 <UART_SetConfig+0x4d8>
 800337a:	bf00      	nop
 800337c:	40011000 	.word	0x40011000
 8003380:	40011400 	.word	0x40011400
 8003384:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003388:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800338c:	2200      	movs	r2, #0
 800338e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003392:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003396:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800339a:	4642      	mov	r2, r8
 800339c:	464b      	mov	r3, r9
 800339e:	1891      	adds	r1, r2, r2
 80033a0:	6239      	str	r1, [r7, #32]
 80033a2:	415b      	adcs	r3, r3
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
 80033a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033aa:	4641      	mov	r1, r8
 80033ac:	1854      	adds	r4, r2, r1
 80033ae:	4649      	mov	r1, r9
 80033b0:	eb43 0501 	adc.w	r5, r3, r1
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	00eb      	lsls	r3, r5, #3
 80033be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033c2:	00e2      	lsls	r2, r4, #3
 80033c4:	4614      	mov	r4, r2
 80033c6:	461d      	mov	r5, r3
 80033c8:	4643      	mov	r3, r8
 80033ca:	18e3      	adds	r3, r4, r3
 80033cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033d0:	464b      	mov	r3, r9
 80033d2:	eb45 0303 	adc.w	r3, r5, r3
 80033d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80033da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80033e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80033ea:	f04f 0200 	mov.w	r2, #0
 80033ee:	f04f 0300 	mov.w	r3, #0
 80033f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80033f6:	4629      	mov	r1, r5
 80033f8:	008b      	lsls	r3, r1, #2
 80033fa:	4621      	mov	r1, r4
 80033fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003400:	4621      	mov	r1, r4
 8003402:	008a      	lsls	r2, r1, #2
 8003404:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003408:	f7fd fa48 	bl	800089c <__aeabi_uldivmod>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4b60      	ldr	r3, [pc, #384]	; (8003594 <UART_SetConfig+0x4e4>)
 8003412:	fba3 2302 	umull	r2, r3, r3, r2
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	011c      	lsls	r4, r3, #4
 800341a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800341e:	2200      	movs	r2, #0
 8003420:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003424:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003428:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800342c:	4642      	mov	r2, r8
 800342e:	464b      	mov	r3, r9
 8003430:	1891      	adds	r1, r2, r2
 8003432:	61b9      	str	r1, [r7, #24]
 8003434:	415b      	adcs	r3, r3
 8003436:	61fb      	str	r3, [r7, #28]
 8003438:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800343c:	4641      	mov	r1, r8
 800343e:	1851      	adds	r1, r2, r1
 8003440:	6139      	str	r1, [r7, #16]
 8003442:	4649      	mov	r1, r9
 8003444:	414b      	adcs	r3, r1
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	f04f 0300 	mov.w	r3, #0
 8003450:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003454:	4659      	mov	r1, fp
 8003456:	00cb      	lsls	r3, r1, #3
 8003458:	4651      	mov	r1, sl
 800345a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800345e:	4651      	mov	r1, sl
 8003460:	00ca      	lsls	r2, r1, #3
 8003462:	4610      	mov	r0, r2
 8003464:	4619      	mov	r1, r3
 8003466:	4603      	mov	r3, r0
 8003468:	4642      	mov	r2, r8
 800346a:	189b      	adds	r3, r3, r2
 800346c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003470:	464b      	mov	r3, r9
 8003472:	460a      	mov	r2, r1
 8003474:	eb42 0303 	adc.w	r3, r2, r3
 8003478:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800347c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	67bb      	str	r3, [r7, #120]	; 0x78
 8003486:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003494:	4649      	mov	r1, r9
 8003496:	008b      	lsls	r3, r1, #2
 8003498:	4641      	mov	r1, r8
 800349a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800349e:	4641      	mov	r1, r8
 80034a0:	008a      	lsls	r2, r1, #2
 80034a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80034a6:	f7fd f9f9 	bl	800089c <__aeabi_uldivmod>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4611      	mov	r1, r2
 80034b0:	4b38      	ldr	r3, [pc, #224]	; (8003594 <UART_SetConfig+0x4e4>)
 80034b2:	fba3 2301 	umull	r2, r3, r3, r1
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	2264      	movs	r2, #100	; 0x64
 80034ba:	fb02 f303 	mul.w	r3, r2, r3
 80034be:	1acb      	subs	r3, r1, r3
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	3332      	adds	r3, #50	; 0x32
 80034c4:	4a33      	ldr	r2, [pc, #204]	; (8003594 <UART_SetConfig+0x4e4>)
 80034c6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ca:	095b      	lsrs	r3, r3, #5
 80034cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034d0:	441c      	add	r4, r3
 80034d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034d6:	2200      	movs	r2, #0
 80034d8:	673b      	str	r3, [r7, #112]	; 0x70
 80034da:	677a      	str	r2, [r7, #116]	; 0x74
 80034dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80034e0:	4642      	mov	r2, r8
 80034e2:	464b      	mov	r3, r9
 80034e4:	1891      	adds	r1, r2, r2
 80034e6:	60b9      	str	r1, [r7, #8]
 80034e8:	415b      	adcs	r3, r3
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034f0:	4641      	mov	r1, r8
 80034f2:	1851      	adds	r1, r2, r1
 80034f4:	6039      	str	r1, [r7, #0]
 80034f6:	4649      	mov	r1, r9
 80034f8:	414b      	adcs	r3, r1
 80034fa:	607b      	str	r3, [r7, #4]
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003508:	4659      	mov	r1, fp
 800350a:	00cb      	lsls	r3, r1, #3
 800350c:	4651      	mov	r1, sl
 800350e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003512:	4651      	mov	r1, sl
 8003514:	00ca      	lsls	r2, r1, #3
 8003516:	4610      	mov	r0, r2
 8003518:	4619      	mov	r1, r3
 800351a:	4603      	mov	r3, r0
 800351c:	4642      	mov	r2, r8
 800351e:	189b      	adds	r3, r3, r2
 8003520:	66bb      	str	r3, [r7, #104]	; 0x68
 8003522:	464b      	mov	r3, r9
 8003524:	460a      	mov	r2, r1
 8003526:	eb42 0303 	adc.w	r3, r2, r3
 800352a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800352c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	663b      	str	r3, [r7, #96]	; 0x60
 8003536:	667a      	str	r2, [r7, #100]	; 0x64
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003544:	4649      	mov	r1, r9
 8003546:	008b      	lsls	r3, r1, #2
 8003548:	4641      	mov	r1, r8
 800354a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800354e:	4641      	mov	r1, r8
 8003550:	008a      	lsls	r2, r1, #2
 8003552:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003556:	f7fd f9a1 	bl	800089c <__aeabi_uldivmod>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	4b0d      	ldr	r3, [pc, #52]	; (8003594 <UART_SetConfig+0x4e4>)
 8003560:	fba3 1302 	umull	r1, r3, r3, r2
 8003564:	095b      	lsrs	r3, r3, #5
 8003566:	2164      	movs	r1, #100	; 0x64
 8003568:	fb01 f303 	mul.w	r3, r1, r3
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	3332      	adds	r3, #50	; 0x32
 8003572:	4a08      	ldr	r2, [pc, #32]	; (8003594 <UART_SetConfig+0x4e4>)
 8003574:	fba2 2303 	umull	r2, r3, r2, r3
 8003578:	095b      	lsrs	r3, r3, #5
 800357a:	f003 020f 	and.w	r2, r3, #15
 800357e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4422      	add	r2, r4
 8003586:	609a      	str	r2, [r3, #8]
}
 8003588:	bf00      	nop
 800358a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800358e:	46bd      	mov	sp, r7
 8003590:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003594:	51eb851f 	.word	0x51eb851f

08003598 <DWT_Init>:
#define DWT_CONTROL *(volatile unsigned long *)0xE0001000
#define SCB_DEMCR   *(volatile unsigned long *)0xE000EDFC


void DWT_Init(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 800359c:	4b08      	ldr	r3, [pc, #32]	; (80035c0 <DWT_Init+0x28>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a07      	ldr	r2, [pc, #28]	; (80035c0 <DWT_Init+0x28>)
 80035a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035a6:	6013      	str	r3, [r2, #0]
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 80035a8:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <DWT_Init+0x2c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a05      	ldr	r2, [pc, #20]	; (80035c4 <DWT_Init+0x2c>)
 80035ae:	f043 0301 	orr.w	r3, r3, #1
 80035b2:	6013      	str	r3, [r2, #0]
}
 80035b4:	bf00      	nop
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	e000edfc 	.word	0xe000edfc
 80035c4:	e0001000 	.word	0xe0001000

080035c8 <delay_micros>:

void delay_micros(uint32_t us)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
    uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);
 80035d0:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <delay_micros+0x3c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a0c      	ldr	r2, [pc, #48]	; (8003608 <delay_micros+0x40>)
 80035d6:	fba2 2303 	umull	r2, r3, r2, r3
 80035da:	0c9a      	lsrs	r2, r3, #18
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	fb02 f303 	mul.w	r3, r2, r3
 80035e2:	60fb      	str	r3, [r7, #12]
    DWT->CYCCNT = 0U; // обнуляем счётчик
 80035e4:	4b09      	ldr	r3, [pc, #36]	; (800360c <delay_micros+0x44>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	605a      	str	r2, [r3, #4]
    while(DWT->CYCCNT < us_count_tic);
 80035ea:	bf00      	nop
 80035ec:	4b07      	ldr	r3, [pc, #28]	; (800360c <delay_micros+0x44>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d8fa      	bhi.n	80035ec <delay_micros+0x24>
}
 80035f6:	bf00      	nop
 80035f8:	bf00      	nop
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	20000000 	.word	0x20000000
 8003608:	431bde83 	.word	0x431bde83
 800360c:	e0001000 	.word	0xe0001000

08003610 <writeByte>:
uint8_t point_flag = 0;

static int8_t TubeTab[] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f, 0x77,0x7c,0x40}; //0~9, A(10), b(11), -(12)

void writeByte(int8_t wr_data)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	71fb      	strb	r3, [r7, #7]
  uint8_t count = 0;
 800361a:	2300      	movs	r3, #0
 800361c:	73fb      	strb	r3, [r7, #15]

  for(uint8_t i = 0; i < 8; i++)
 800361e:	2300      	movs	r3, #0
 8003620:	73bb      	strb	r3, [r7, #14]
 8003622:	e029      	b.n	8003678 <writeByte+0x68>
  {
    CLK_LOW;
 8003624:	2200      	movs	r2, #0
 8003626:	2120      	movs	r1, #32
 8003628:	482e      	ldr	r0, [pc, #184]	; (80036e4 <writeByte+0xd4>)
 800362a:	f7fe ff37 	bl	800249c <HAL_GPIO_WritePin>

    if(wr_data & 0x01) DIO_HIGH;
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <writeByte+0x34>
 8003638:	2201      	movs	r2, #1
 800363a:	2140      	movs	r1, #64	; 0x40
 800363c:	4829      	ldr	r0, [pc, #164]	; (80036e4 <writeByte+0xd4>)
 800363e:	f7fe ff2d 	bl	800249c <HAL_GPIO_WritePin>
 8003642:	e004      	b.n	800364e <writeByte+0x3e>
    else DIO_LOW;
 8003644:	2200      	movs	r2, #0
 8003646:	2140      	movs	r1, #64	; 0x40
 8003648:	4826      	ldr	r0, [pc, #152]	; (80036e4 <writeByte+0xd4>)
 800364a:	f7fe ff27 	bl	800249c <HAL_GPIO_WritePin>

    delay_micros(6);
 800364e:	2006      	movs	r0, #6
 8003650:	f7ff ffba 	bl	80035c8 <delay_micros>
    wr_data >>= 1;
 8003654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003658:	105b      	asrs	r3, r3, #1
 800365a:	71fb      	strb	r3, [r7, #7]
    delay_micros(6);
 800365c:	2006      	movs	r0, #6
 800365e:	f7ff ffb3 	bl	80035c8 <delay_micros>
    CLK_HIGH;
 8003662:	2201      	movs	r2, #1
 8003664:	2120      	movs	r1, #32
 8003666:	481f      	ldr	r0, [pc, #124]	; (80036e4 <writeByte+0xd4>)
 8003668:	f7fe ff18 	bl	800249c <HAL_GPIO_WritePin>
    delay_micros(8);
 800366c:	2008      	movs	r0, #8
 800366e:	f7ff ffab 	bl	80035c8 <delay_micros>
  for(uint8_t i = 0; i < 8; i++)
 8003672:	7bbb      	ldrb	r3, [r7, #14]
 8003674:	3301      	adds	r3, #1
 8003676:	73bb      	strb	r3, [r7, #14]
 8003678:	7bbb      	ldrb	r3, [r7, #14]
 800367a:	2b07      	cmp	r3, #7
 800367c:	d9d2      	bls.n	8003624 <writeByte+0x14>
  }

  CLK_LOW;
 800367e:	2200      	movs	r2, #0
 8003680:	2120      	movs	r1, #32
 8003682:	4818      	ldr	r0, [pc, #96]	; (80036e4 <writeByte+0xd4>)
 8003684:	f7fe ff0a 	bl	800249c <HAL_GPIO_WritePin>
  delay_micros(6);
 8003688:	2006      	movs	r0, #6
 800368a:	f7ff ff9d 	bl	80035c8 <delay_micros>
  DIO_HIGH;
 800368e:	2201      	movs	r2, #1
 8003690:	2140      	movs	r1, #64	; 0x40
 8003692:	4814      	ldr	r0, [pc, #80]	; (80036e4 <writeByte+0xd4>)
 8003694:	f7fe ff02 	bl	800249c <HAL_GPIO_WritePin>
  delay_micros(6);
 8003698:	2006      	movs	r0, #6
 800369a:	f7ff ff95 	bl	80035c8 <delay_micros>
  CLK_HIGH;
 800369e:	2201      	movs	r2, #1
 80036a0:	2120      	movs	r1, #32
 80036a2:	4810      	ldr	r0, [pc, #64]	; (80036e4 <writeByte+0xd4>)
 80036a4:	f7fe fefa 	bl	800249c <HAL_GPIO_WritePin>
  delay_micros(8);
 80036a8:	2008      	movs	r0, #8
 80036aa:	f7ff ff8d 	bl	80035c8 <delay_micros>

  while(DIO_READ)
 80036ae:	e00c      	b.n	80036ca <writeByte+0xba>
  {
    count += 1;
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
 80036b2:	3301      	adds	r3, #1
 80036b4:	73fb      	strb	r3, [r7, #15]

    if(count == 200)
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
 80036b8:	2bc8      	cmp	r3, #200	; 0xc8
 80036ba:	d106      	bne.n	80036ca <writeByte+0xba>
    {
    	DIO_LOW;
 80036bc:	2200      	movs	r2, #0
 80036be:	2140      	movs	r1, #64	; 0x40
 80036c0:	4808      	ldr	r0, [pc, #32]	; (80036e4 <writeByte+0xd4>)
 80036c2:	f7fe feeb 	bl	800249c <HAL_GPIO_WritePin>
    	count = 0;
 80036c6:	2300      	movs	r3, #0
 80036c8:	73fb      	strb	r3, [r7, #15]
  while(DIO_READ)
 80036ca:	2140      	movs	r1, #64	; 0x40
 80036cc:	4805      	ldr	r0, [pc, #20]	; (80036e4 <writeByte+0xd4>)
 80036ce:	f7fe fecd 	bl	800246c <HAL_GPIO_ReadPin>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1eb      	bne.n	80036b0 <writeByte+0xa0>
    }
  }
}
 80036d8:	bf00      	nop
 80036da:	bf00      	nop
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40020400 	.word	0x40020400

080036e8 <start>:

void start(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
	CLK_HIGH;
 80036ec:	2201      	movs	r2, #1
 80036ee:	2120      	movs	r1, #32
 80036f0:	480e      	ldr	r0, [pc, #56]	; (800372c <start+0x44>)
 80036f2:	f7fe fed3 	bl	800249c <HAL_GPIO_WritePin>
	delay_micros(6);
 80036f6:	2006      	movs	r0, #6
 80036f8:	f7ff ff66 	bl	80035c8 <delay_micros>
	DIO_HIGH;
 80036fc:	2201      	movs	r2, #1
 80036fe:	2140      	movs	r1, #64	; 0x40
 8003700:	480a      	ldr	r0, [pc, #40]	; (800372c <start+0x44>)
 8003702:	f7fe fecb 	bl	800249c <HAL_GPIO_WritePin>
	delay_micros(6);
 8003706:	2006      	movs	r0, #6
 8003708:	f7ff ff5e 	bl	80035c8 <delay_micros>
	DIO_LOW;
 800370c:	2200      	movs	r2, #0
 800370e:	2140      	movs	r1, #64	; 0x40
 8003710:	4806      	ldr	r0, [pc, #24]	; (800372c <start+0x44>)
 8003712:	f7fe fec3 	bl	800249c <HAL_GPIO_WritePin>
	delay_micros(6);
 8003716:	2006      	movs	r0, #6
 8003718:	f7ff ff56 	bl	80035c8 <delay_micros>
	CLK_LOW;
 800371c:	2200      	movs	r2, #0
 800371e:	2120      	movs	r1, #32
 8003720:	4802      	ldr	r0, [pc, #8]	; (800372c <start+0x44>)
 8003722:	f7fe febb 	bl	800249c <HAL_GPIO_WritePin>
}
 8003726:	bf00      	nop
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40020400 	.word	0x40020400

08003730 <stop>:

void stop(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
	CLK_LOW;
 8003734:	2200      	movs	r2, #0
 8003736:	2120      	movs	r1, #32
 8003738:	480e      	ldr	r0, [pc, #56]	; (8003774 <stop+0x44>)
 800373a:	f7fe feaf 	bl	800249c <HAL_GPIO_WritePin>
	delay_micros(6);
 800373e:	2006      	movs	r0, #6
 8003740:	f7ff ff42 	bl	80035c8 <delay_micros>
	DIO_LOW;
 8003744:	2200      	movs	r2, #0
 8003746:	2140      	movs	r1, #64	; 0x40
 8003748:	480a      	ldr	r0, [pc, #40]	; (8003774 <stop+0x44>)
 800374a:	f7fe fea7 	bl	800249c <HAL_GPIO_WritePin>
	delay_micros(6);
 800374e:	2006      	movs	r0, #6
 8003750:	f7ff ff3a 	bl	80035c8 <delay_micros>
	CLK_HIGH;
 8003754:	2201      	movs	r2, #1
 8003756:	2120      	movs	r1, #32
 8003758:	4806      	ldr	r0, [pc, #24]	; (8003774 <stop+0x44>)
 800375a:	f7fe fe9f 	bl	800249c <HAL_GPIO_WritePin>
	delay_micros(6);
 800375e:	2006      	movs	r0, #6
 8003760:	f7ff ff32 	bl	80035c8 <delay_micros>
	DIO_HIGH;
 8003764:	2201      	movs	r2, #1
 8003766:	2140      	movs	r1, #64	; 0x40
 8003768:	4802      	ldr	r0, [pc, #8]	; (8003774 <stop+0x44>)
 800376a:	f7fe fe97 	bl	800249c <HAL_GPIO_WritePin>
}
 800376e:	bf00      	nop
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40020400 	.word	0x40020400

08003778 <display_mass>:

void display_mass(int8_t DispData[])
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
	int8_t SegData[4];

	for(uint8_t i = 0; i < 4; i++)
 8003780:	2300      	movs	r3, #0
 8003782:	73fb      	strb	r3, [r7, #15]
 8003784:	e00c      	b.n	80037a0 <display_mass+0x28>
	{
		SegData[i] = DispData[i];
 8003786:	7bfb      	ldrb	r3, [r7, #15]
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	441a      	add	r2, r3
 800378c:	7bfb      	ldrb	r3, [r7, #15]
 800378e:	f992 2000 	ldrsb.w	r2, [r2]
 8003792:	3310      	adds	r3, #16
 8003794:	443b      	add	r3, r7
 8003796:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(uint8_t i = 0; i < 4; i++)
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	3301      	adds	r3, #1
 800379e:	73fb      	strb	r3, [r7, #15]
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	d9ef      	bls.n	8003786 <display_mass+0xe>
	}

	coding_mass(SegData);
 80037a6:	f107 0308 	add.w	r3, r7, #8
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 f88e 	bl	80038cc <coding_mass>
	start();
 80037b0:	f7ff ff9a 	bl	80036e8 <start>
	writeByte(ADDR_AUTO);
 80037b4:	2040      	movs	r0, #64	; 0x40
 80037b6:	f7ff ff2b 	bl	8003610 <writeByte>
	stop();
 80037ba:	f7ff ffb9 	bl	8003730 <stop>
	start();
 80037be:	f7ff ff93 	bl	80036e8 <start>
	writeByte(0xc0);
 80037c2:	f06f 003f 	mvn.w	r0, #63	; 0x3f
 80037c6:	f7ff ff23 	bl	8003610 <writeByte>

	for(uint8_t i = 0; i < 4; i++)
 80037ca:	2300      	movs	r3, #0
 80037cc:	73bb      	strb	r3, [r7, #14]
 80037ce:	e00a      	b.n	80037e6 <display_mass+0x6e>
	{
		writeByte(SegData[i]);
 80037d0:	7bbb      	ldrb	r3, [r7, #14]
 80037d2:	3310      	adds	r3, #16
 80037d4:	443b      	add	r3, r7
 80037d6:	f913 3c08 	ldrsb.w	r3, [r3, #-8]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff ff18 	bl	8003610 <writeByte>
	for(uint8_t i = 0; i < 4; i++)
 80037e0:	7bbb      	ldrb	r3, [r7, #14]
 80037e2:	3301      	adds	r3, #1
 80037e4:	73bb      	strb	r3, [r7, #14]
 80037e6:	7bbb      	ldrb	r3, [r7, #14]
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d9f1      	bls.n	80037d0 <display_mass+0x58>
	}

	stop();
 80037ec:	f7ff ffa0 	bl	8003730 <stop>
	start();
 80037f0:	f7ff ff7a 	bl	80036e8 <start>
	writeByte(Cmd_DispCtrl);
 80037f4:	4b05      	ldr	r3, [pc, #20]	; (800380c <display_mass+0x94>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	b25b      	sxtb	r3, r3
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff ff08 	bl	8003610 <writeByte>
	stop();
 8003800:	f7ff ff96 	bl	8003730 <stop>
}
 8003804:	bf00      	nop
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	20000124 	.word	0x20000124

08003810 <display>:

void display(uint8_t BitAddr, int8_t DispData)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	460a      	mov	r2, r1
 800381a:	71fb      	strb	r3, [r7, #7]
 800381c:	4613      	mov	r3, r2
 800381e:	71bb      	strb	r3, [r7, #6]
	int8_t SegData;

	SegData = coding(DispData);
 8003820:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003824:	4618      	mov	r0, r3
 8003826:	f000 f891 	bl	800394c <coding>
 800382a:	4603      	mov	r3, r0
 800382c:	73fb      	strb	r3, [r7, #15]
	start();
 800382e:	f7ff ff5b 	bl	80036e8 <start>
	writeByte(ADDR_FIXED);
 8003832:	2044      	movs	r0, #68	; 0x44
 8003834:	f7ff feec 	bl	8003610 <writeByte>

	stop();
 8003838:	f7ff ff7a 	bl	8003730 <stop>
	start();
 800383c:	f7ff ff54 	bl	80036e8 <start>
	writeByte(BitAddr | 0xc0);
 8003840:	79fb      	ldrb	r3, [r7, #7]
 8003842:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8003846:	b2db      	uxtb	r3, r3
 8003848:	b25b      	sxtb	r3, r3
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff fee0 	bl	8003610 <writeByte>

	writeByte(SegData);
 8003850:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff fedb 	bl	8003610 <writeByte>
	stop();
 800385a:	f7ff ff69 	bl	8003730 <stop>
	start();
 800385e:	f7ff ff43 	bl	80036e8 <start>

	writeByte(Cmd_DispCtrl);
 8003862:	4b06      	ldr	r3, [pc, #24]	; (800387c <display+0x6c>)
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	b25b      	sxtb	r3, r3
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff fed1 	bl	8003610 <writeByte>
	stop();
 800386e:	f7ff ff5f 	bl	8003730 <stop>
}
 8003872:	bf00      	nop
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	20000124 	.word	0x20000124

08003880 <clearDisplay>:

void clearDisplay(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
	display(0x00, 0x7f);
 8003884:	217f      	movs	r1, #127	; 0x7f
 8003886:	2000      	movs	r0, #0
 8003888:	f7ff ffc2 	bl	8003810 <display>
	display(0x01, 0x7f);
 800388c:	217f      	movs	r1, #127	; 0x7f
 800388e:	2001      	movs	r0, #1
 8003890:	f7ff ffbe 	bl	8003810 <display>
	display(0x02, 0x7f);
 8003894:	217f      	movs	r1, #127	; 0x7f
 8003896:	2002      	movs	r0, #2
 8003898:	f7ff ffba 	bl	8003810 <display>
	display(0x03, 0x7f);
 800389c:	217f      	movs	r1, #127	; 0x7f
 800389e:	2003      	movs	r0, #3
 80038a0:	f7ff ffb6 	bl	8003810 <display>
}
 80038a4:	bf00      	nop
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <set_brightness>:

void set_brightness(uint8_t brightness)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	71fb      	strb	r3, [r7, #7]
	Cmd_DispCtrl = 0x88 + brightness;
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	3b78      	subs	r3, #120	; 0x78
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	4b03      	ldr	r3, [pc, #12]	; (80038c8 <set_brightness+0x20>)
 80038ba:	701a      	strb	r2, [r3, #0]
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	20000124 	.word	0x20000124

080038cc <coding_mass>:
	if(cmd == 0) point_flag = (~point_flag) & 0x01;
	else point_flag = 1;
}

void coding_mass(int8_t DispData[])
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
	uint8_t PointData;

	if(point_flag == 1) PointData = 0x80;
 80038d4:	4b1b      	ldr	r3, [pc, #108]	; (8003944 <coding_mass+0x78>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d102      	bne.n	80038e2 <coding_mass+0x16>
 80038dc:	2380      	movs	r3, #128	; 0x80
 80038de:	73fb      	strb	r3, [r7, #15]
 80038e0:	e001      	b.n	80038e6 <coding_mass+0x1a>
	else PointData = 0;
 80038e2:	2300      	movs	r3, #0
 80038e4:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < 4; i++)
 80038e6:	2300      	movs	r3, #0
 80038e8:	73bb      	strb	r3, [r7, #14]
 80038ea:	e020      	b.n	800392e <coding_mass+0x62>
	{
		if(DispData[i] == 0x7f) DispData[i] = 0x00;
 80038ec:	7bbb      	ldrb	r3, [r7, #14]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	4413      	add	r3, r2
 80038f2:	f993 3000 	ldrsb.w	r3, [r3]
 80038f6:	2b7f      	cmp	r3, #127	; 0x7f
 80038f8:	d105      	bne.n	8003906 <coding_mass+0x3a>
 80038fa:	7bbb      	ldrb	r3, [r7, #14]
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	4413      	add	r3, r2
 8003900:	2200      	movs	r2, #0
 8003902:	701a      	strb	r2, [r3, #0]
 8003904:	e010      	b.n	8003928 <coding_mass+0x5c>
		else DispData[i] = TubeTab[DispData[i]] + PointData;
 8003906:	7bbb      	ldrb	r3, [r7, #14]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	4413      	add	r3, r2
 800390c:	f993 3000 	ldrsb.w	r3, [r3]
 8003910:	461a      	mov	r2, r3
 8003912:	4b0d      	ldr	r3, [pc, #52]	; (8003948 <coding_mass+0x7c>)
 8003914:	569b      	ldrsb	r3, [r3, r2]
 8003916:	b2da      	uxtb	r2, r3
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	4413      	add	r3, r2
 800391c:	b2d9      	uxtb	r1, r3
 800391e:	7bbb      	ldrb	r3, [r7, #14]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	4413      	add	r3, r2
 8003924:	b24a      	sxtb	r2, r1
 8003926:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 4; i++)
 8003928:	7bbb      	ldrb	r3, [r7, #14]
 800392a:	3301      	adds	r3, #1
 800392c:	73bb      	strb	r3, [r7, #14]
 800392e:	7bbb      	ldrb	r3, [r7, #14]
 8003930:	2b03      	cmp	r3, #3
 8003932:	d9db      	bls.n	80038ec <coding_mass+0x20>
	}
}
 8003934:	bf00      	nop
 8003936:	bf00      	nop
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	20000125 	.word	0x20000125
 8003948:	2000000c 	.word	0x2000000c

0800394c <coding>:

int8_t coding(int8_t DispData)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	71fb      	strb	r3, [r7, #7]
	uint8_t PointData;

	if(point_flag == 1) PointData = 0x80;
 8003956:	4b10      	ldr	r3, [pc, #64]	; (8003998 <coding+0x4c>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d102      	bne.n	8003964 <coding+0x18>
 800395e:	2380      	movs	r3, #128	; 0x80
 8003960:	73fb      	strb	r3, [r7, #15]
 8003962:	e001      	b.n	8003968 <coding+0x1c>
	else PointData = 0;
 8003964:	2300      	movs	r3, #0
 8003966:	73fb      	strb	r3, [r7, #15]

	if(DispData == 0x7f) DispData = 0x00 + PointData;
 8003968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396c:	2b7f      	cmp	r3, #127	; 0x7f
 800396e:	d102      	bne.n	8003976 <coding+0x2a>
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	71fb      	strb	r3, [r7, #7]
 8003974:	e008      	b.n	8003988 <coding+0x3c>
	else DispData = TubeTab[DispData] + PointData;
 8003976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397a:	4a08      	ldr	r2, [pc, #32]	; (800399c <coding+0x50>)
 800397c:	56d3      	ldrsb	r3, [r2, r3]
 800397e:	b2da      	uxtb	r2, r3
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	4413      	add	r3, r2
 8003984:	b2db      	uxtb	r3, r3
 8003986:	71fb      	strb	r3, [r7, #7]

	return DispData;
 8003988:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	20000125 	.word	0x20000125
 800399c:	2000000c 	.word	0x2000000c

080039a0 <siprintf>:
 80039a0:	b40e      	push	{r1, r2, r3}
 80039a2:	b500      	push	{lr}
 80039a4:	b09c      	sub	sp, #112	; 0x70
 80039a6:	ab1d      	add	r3, sp, #116	; 0x74
 80039a8:	9002      	str	r0, [sp, #8]
 80039aa:	9006      	str	r0, [sp, #24]
 80039ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039b0:	4809      	ldr	r0, [pc, #36]	; (80039d8 <siprintf+0x38>)
 80039b2:	9107      	str	r1, [sp, #28]
 80039b4:	9104      	str	r1, [sp, #16]
 80039b6:	4909      	ldr	r1, [pc, #36]	; (80039dc <siprintf+0x3c>)
 80039b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80039bc:	9105      	str	r1, [sp, #20]
 80039be:	6800      	ldr	r0, [r0, #0]
 80039c0:	9301      	str	r3, [sp, #4]
 80039c2:	a902      	add	r1, sp, #8
 80039c4:	f000 f992 	bl	8003cec <_svfiprintf_r>
 80039c8:	9b02      	ldr	r3, [sp, #8]
 80039ca:	2200      	movs	r2, #0
 80039cc:	701a      	strb	r2, [r3, #0]
 80039ce:	b01c      	add	sp, #112	; 0x70
 80039d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80039d4:	b003      	add	sp, #12
 80039d6:	4770      	bx	lr
 80039d8:	20000068 	.word	0x20000068
 80039dc:	ffff0208 	.word	0xffff0208

080039e0 <memset>:
 80039e0:	4402      	add	r2, r0
 80039e2:	4603      	mov	r3, r0
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d100      	bne.n	80039ea <memset+0xa>
 80039e8:	4770      	bx	lr
 80039ea:	f803 1b01 	strb.w	r1, [r3], #1
 80039ee:	e7f9      	b.n	80039e4 <memset+0x4>

080039f0 <__errno>:
 80039f0:	4b01      	ldr	r3, [pc, #4]	; (80039f8 <__errno+0x8>)
 80039f2:	6818      	ldr	r0, [r3, #0]
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	20000068 	.word	0x20000068

080039fc <__libc_init_array>:
 80039fc:	b570      	push	{r4, r5, r6, lr}
 80039fe:	4d0d      	ldr	r5, [pc, #52]	; (8003a34 <__libc_init_array+0x38>)
 8003a00:	4c0d      	ldr	r4, [pc, #52]	; (8003a38 <__libc_init_array+0x3c>)
 8003a02:	1b64      	subs	r4, r4, r5
 8003a04:	10a4      	asrs	r4, r4, #2
 8003a06:	2600      	movs	r6, #0
 8003a08:	42a6      	cmp	r6, r4
 8003a0a:	d109      	bne.n	8003a20 <__libc_init_array+0x24>
 8003a0c:	4d0b      	ldr	r5, [pc, #44]	; (8003a3c <__libc_init_array+0x40>)
 8003a0e:	4c0c      	ldr	r4, [pc, #48]	; (8003a40 <__libc_init_array+0x44>)
 8003a10:	f000 fc6a 	bl	80042e8 <_init>
 8003a14:	1b64      	subs	r4, r4, r5
 8003a16:	10a4      	asrs	r4, r4, #2
 8003a18:	2600      	movs	r6, #0
 8003a1a:	42a6      	cmp	r6, r4
 8003a1c:	d105      	bne.n	8003a2a <__libc_init_array+0x2e>
 8003a1e:	bd70      	pop	{r4, r5, r6, pc}
 8003a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a24:	4798      	blx	r3
 8003a26:	3601      	adds	r6, #1
 8003a28:	e7ee      	b.n	8003a08 <__libc_init_array+0xc>
 8003a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a2e:	4798      	blx	r3
 8003a30:	3601      	adds	r6, #1
 8003a32:	e7f2      	b.n	8003a1a <__libc_init_array+0x1e>
 8003a34:	0800435c 	.word	0x0800435c
 8003a38:	0800435c 	.word	0x0800435c
 8003a3c:	0800435c 	.word	0x0800435c
 8003a40:	08004360 	.word	0x08004360

08003a44 <__retarget_lock_acquire_recursive>:
 8003a44:	4770      	bx	lr

08003a46 <__retarget_lock_release_recursive>:
 8003a46:	4770      	bx	lr

08003a48 <_free_r>:
 8003a48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a4a:	2900      	cmp	r1, #0
 8003a4c:	d044      	beq.n	8003ad8 <_free_r+0x90>
 8003a4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a52:	9001      	str	r0, [sp, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f1a1 0404 	sub.w	r4, r1, #4
 8003a5a:	bfb8      	it	lt
 8003a5c:	18e4      	addlt	r4, r4, r3
 8003a5e:	f000 f8df 	bl	8003c20 <__malloc_lock>
 8003a62:	4a1e      	ldr	r2, [pc, #120]	; (8003adc <_free_r+0x94>)
 8003a64:	9801      	ldr	r0, [sp, #4]
 8003a66:	6813      	ldr	r3, [r2, #0]
 8003a68:	b933      	cbnz	r3, 8003a78 <_free_r+0x30>
 8003a6a:	6063      	str	r3, [r4, #4]
 8003a6c:	6014      	str	r4, [r2, #0]
 8003a6e:	b003      	add	sp, #12
 8003a70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a74:	f000 b8da 	b.w	8003c2c <__malloc_unlock>
 8003a78:	42a3      	cmp	r3, r4
 8003a7a:	d908      	bls.n	8003a8e <_free_r+0x46>
 8003a7c:	6825      	ldr	r5, [r4, #0]
 8003a7e:	1961      	adds	r1, r4, r5
 8003a80:	428b      	cmp	r3, r1
 8003a82:	bf01      	itttt	eq
 8003a84:	6819      	ldreq	r1, [r3, #0]
 8003a86:	685b      	ldreq	r3, [r3, #4]
 8003a88:	1949      	addeq	r1, r1, r5
 8003a8a:	6021      	streq	r1, [r4, #0]
 8003a8c:	e7ed      	b.n	8003a6a <_free_r+0x22>
 8003a8e:	461a      	mov	r2, r3
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	b10b      	cbz	r3, 8003a98 <_free_r+0x50>
 8003a94:	42a3      	cmp	r3, r4
 8003a96:	d9fa      	bls.n	8003a8e <_free_r+0x46>
 8003a98:	6811      	ldr	r1, [r2, #0]
 8003a9a:	1855      	adds	r5, r2, r1
 8003a9c:	42a5      	cmp	r5, r4
 8003a9e:	d10b      	bne.n	8003ab8 <_free_r+0x70>
 8003aa0:	6824      	ldr	r4, [r4, #0]
 8003aa2:	4421      	add	r1, r4
 8003aa4:	1854      	adds	r4, r2, r1
 8003aa6:	42a3      	cmp	r3, r4
 8003aa8:	6011      	str	r1, [r2, #0]
 8003aaa:	d1e0      	bne.n	8003a6e <_free_r+0x26>
 8003aac:	681c      	ldr	r4, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	6053      	str	r3, [r2, #4]
 8003ab2:	440c      	add	r4, r1
 8003ab4:	6014      	str	r4, [r2, #0]
 8003ab6:	e7da      	b.n	8003a6e <_free_r+0x26>
 8003ab8:	d902      	bls.n	8003ac0 <_free_r+0x78>
 8003aba:	230c      	movs	r3, #12
 8003abc:	6003      	str	r3, [r0, #0]
 8003abe:	e7d6      	b.n	8003a6e <_free_r+0x26>
 8003ac0:	6825      	ldr	r5, [r4, #0]
 8003ac2:	1961      	adds	r1, r4, r5
 8003ac4:	428b      	cmp	r3, r1
 8003ac6:	bf04      	itt	eq
 8003ac8:	6819      	ldreq	r1, [r3, #0]
 8003aca:	685b      	ldreq	r3, [r3, #4]
 8003acc:	6063      	str	r3, [r4, #4]
 8003ace:	bf04      	itt	eq
 8003ad0:	1949      	addeq	r1, r1, r5
 8003ad2:	6021      	streq	r1, [r4, #0]
 8003ad4:	6054      	str	r4, [r2, #4]
 8003ad6:	e7ca      	b.n	8003a6e <_free_r+0x26>
 8003ad8:	b003      	add	sp, #12
 8003ada:	bd30      	pop	{r4, r5, pc}
 8003adc:	20000268 	.word	0x20000268

08003ae0 <sbrk_aligned>:
 8003ae0:	b570      	push	{r4, r5, r6, lr}
 8003ae2:	4e0e      	ldr	r6, [pc, #56]	; (8003b1c <sbrk_aligned+0x3c>)
 8003ae4:	460c      	mov	r4, r1
 8003ae6:	6831      	ldr	r1, [r6, #0]
 8003ae8:	4605      	mov	r5, r0
 8003aea:	b911      	cbnz	r1, 8003af2 <sbrk_aligned+0x12>
 8003aec:	f000 fba6 	bl	800423c <_sbrk_r>
 8003af0:	6030      	str	r0, [r6, #0]
 8003af2:	4621      	mov	r1, r4
 8003af4:	4628      	mov	r0, r5
 8003af6:	f000 fba1 	bl	800423c <_sbrk_r>
 8003afa:	1c43      	adds	r3, r0, #1
 8003afc:	d00a      	beq.n	8003b14 <sbrk_aligned+0x34>
 8003afe:	1cc4      	adds	r4, r0, #3
 8003b00:	f024 0403 	bic.w	r4, r4, #3
 8003b04:	42a0      	cmp	r0, r4
 8003b06:	d007      	beq.n	8003b18 <sbrk_aligned+0x38>
 8003b08:	1a21      	subs	r1, r4, r0
 8003b0a:	4628      	mov	r0, r5
 8003b0c:	f000 fb96 	bl	800423c <_sbrk_r>
 8003b10:	3001      	adds	r0, #1
 8003b12:	d101      	bne.n	8003b18 <sbrk_aligned+0x38>
 8003b14:	f04f 34ff 	mov.w	r4, #4294967295
 8003b18:	4620      	mov	r0, r4
 8003b1a:	bd70      	pop	{r4, r5, r6, pc}
 8003b1c:	2000026c 	.word	0x2000026c

08003b20 <_malloc_r>:
 8003b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b24:	1ccd      	adds	r5, r1, #3
 8003b26:	f025 0503 	bic.w	r5, r5, #3
 8003b2a:	3508      	adds	r5, #8
 8003b2c:	2d0c      	cmp	r5, #12
 8003b2e:	bf38      	it	cc
 8003b30:	250c      	movcc	r5, #12
 8003b32:	2d00      	cmp	r5, #0
 8003b34:	4607      	mov	r7, r0
 8003b36:	db01      	blt.n	8003b3c <_malloc_r+0x1c>
 8003b38:	42a9      	cmp	r1, r5
 8003b3a:	d905      	bls.n	8003b48 <_malloc_r+0x28>
 8003b3c:	230c      	movs	r3, #12
 8003b3e:	603b      	str	r3, [r7, #0]
 8003b40:	2600      	movs	r6, #0
 8003b42:	4630      	mov	r0, r6
 8003b44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b48:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003c1c <_malloc_r+0xfc>
 8003b4c:	f000 f868 	bl	8003c20 <__malloc_lock>
 8003b50:	f8d8 3000 	ldr.w	r3, [r8]
 8003b54:	461c      	mov	r4, r3
 8003b56:	bb5c      	cbnz	r4, 8003bb0 <_malloc_r+0x90>
 8003b58:	4629      	mov	r1, r5
 8003b5a:	4638      	mov	r0, r7
 8003b5c:	f7ff ffc0 	bl	8003ae0 <sbrk_aligned>
 8003b60:	1c43      	adds	r3, r0, #1
 8003b62:	4604      	mov	r4, r0
 8003b64:	d155      	bne.n	8003c12 <_malloc_r+0xf2>
 8003b66:	f8d8 4000 	ldr.w	r4, [r8]
 8003b6a:	4626      	mov	r6, r4
 8003b6c:	2e00      	cmp	r6, #0
 8003b6e:	d145      	bne.n	8003bfc <_malloc_r+0xdc>
 8003b70:	2c00      	cmp	r4, #0
 8003b72:	d048      	beq.n	8003c06 <_malloc_r+0xe6>
 8003b74:	6823      	ldr	r3, [r4, #0]
 8003b76:	4631      	mov	r1, r6
 8003b78:	4638      	mov	r0, r7
 8003b7a:	eb04 0903 	add.w	r9, r4, r3
 8003b7e:	f000 fb5d 	bl	800423c <_sbrk_r>
 8003b82:	4581      	cmp	r9, r0
 8003b84:	d13f      	bne.n	8003c06 <_malloc_r+0xe6>
 8003b86:	6821      	ldr	r1, [r4, #0]
 8003b88:	1a6d      	subs	r5, r5, r1
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	4638      	mov	r0, r7
 8003b8e:	f7ff ffa7 	bl	8003ae0 <sbrk_aligned>
 8003b92:	3001      	adds	r0, #1
 8003b94:	d037      	beq.n	8003c06 <_malloc_r+0xe6>
 8003b96:	6823      	ldr	r3, [r4, #0]
 8003b98:	442b      	add	r3, r5
 8003b9a:	6023      	str	r3, [r4, #0]
 8003b9c:	f8d8 3000 	ldr.w	r3, [r8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d038      	beq.n	8003c16 <_malloc_r+0xf6>
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	42a2      	cmp	r2, r4
 8003ba8:	d12b      	bne.n	8003c02 <_malloc_r+0xe2>
 8003baa:	2200      	movs	r2, #0
 8003bac:	605a      	str	r2, [r3, #4]
 8003bae:	e00f      	b.n	8003bd0 <_malloc_r+0xb0>
 8003bb0:	6822      	ldr	r2, [r4, #0]
 8003bb2:	1b52      	subs	r2, r2, r5
 8003bb4:	d41f      	bmi.n	8003bf6 <_malloc_r+0xd6>
 8003bb6:	2a0b      	cmp	r2, #11
 8003bb8:	d917      	bls.n	8003bea <_malloc_r+0xca>
 8003bba:	1961      	adds	r1, r4, r5
 8003bbc:	42a3      	cmp	r3, r4
 8003bbe:	6025      	str	r5, [r4, #0]
 8003bc0:	bf18      	it	ne
 8003bc2:	6059      	strne	r1, [r3, #4]
 8003bc4:	6863      	ldr	r3, [r4, #4]
 8003bc6:	bf08      	it	eq
 8003bc8:	f8c8 1000 	streq.w	r1, [r8]
 8003bcc:	5162      	str	r2, [r4, r5]
 8003bce:	604b      	str	r3, [r1, #4]
 8003bd0:	4638      	mov	r0, r7
 8003bd2:	f104 060b 	add.w	r6, r4, #11
 8003bd6:	f000 f829 	bl	8003c2c <__malloc_unlock>
 8003bda:	f026 0607 	bic.w	r6, r6, #7
 8003bde:	1d23      	adds	r3, r4, #4
 8003be0:	1af2      	subs	r2, r6, r3
 8003be2:	d0ae      	beq.n	8003b42 <_malloc_r+0x22>
 8003be4:	1b9b      	subs	r3, r3, r6
 8003be6:	50a3      	str	r3, [r4, r2]
 8003be8:	e7ab      	b.n	8003b42 <_malloc_r+0x22>
 8003bea:	42a3      	cmp	r3, r4
 8003bec:	6862      	ldr	r2, [r4, #4]
 8003bee:	d1dd      	bne.n	8003bac <_malloc_r+0x8c>
 8003bf0:	f8c8 2000 	str.w	r2, [r8]
 8003bf4:	e7ec      	b.n	8003bd0 <_malloc_r+0xb0>
 8003bf6:	4623      	mov	r3, r4
 8003bf8:	6864      	ldr	r4, [r4, #4]
 8003bfa:	e7ac      	b.n	8003b56 <_malloc_r+0x36>
 8003bfc:	4634      	mov	r4, r6
 8003bfe:	6876      	ldr	r6, [r6, #4]
 8003c00:	e7b4      	b.n	8003b6c <_malloc_r+0x4c>
 8003c02:	4613      	mov	r3, r2
 8003c04:	e7cc      	b.n	8003ba0 <_malloc_r+0x80>
 8003c06:	230c      	movs	r3, #12
 8003c08:	603b      	str	r3, [r7, #0]
 8003c0a:	4638      	mov	r0, r7
 8003c0c:	f000 f80e 	bl	8003c2c <__malloc_unlock>
 8003c10:	e797      	b.n	8003b42 <_malloc_r+0x22>
 8003c12:	6025      	str	r5, [r4, #0]
 8003c14:	e7dc      	b.n	8003bd0 <_malloc_r+0xb0>
 8003c16:	605b      	str	r3, [r3, #4]
 8003c18:	deff      	udf	#255	; 0xff
 8003c1a:	bf00      	nop
 8003c1c:	20000268 	.word	0x20000268

08003c20 <__malloc_lock>:
 8003c20:	4801      	ldr	r0, [pc, #4]	; (8003c28 <__malloc_lock+0x8>)
 8003c22:	f7ff bf0f 	b.w	8003a44 <__retarget_lock_acquire_recursive>
 8003c26:	bf00      	nop
 8003c28:	20000264 	.word	0x20000264

08003c2c <__malloc_unlock>:
 8003c2c:	4801      	ldr	r0, [pc, #4]	; (8003c34 <__malloc_unlock+0x8>)
 8003c2e:	f7ff bf0a 	b.w	8003a46 <__retarget_lock_release_recursive>
 8003c32:	bf00      	nop
 8003c34:	20000264 	.word	0x20000264

08003c38 <__ssputs_r>:
 8003c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c3c:	688e      	ldr	r6, [r1, #8]
 8003c3e:	461f      	mov	r7, r3
 8003c40:	42be      	cmp	r6, r7
 8003c42:	680b      	ldr	r3, [r1, #0]
 8003c44:	4682      	mov	sl, r0
 8003c46:	460c      	mov	r4, r1
 8003c48:	4690      	mov	r8, r2
 8003c4a:	d82c      	bhi.n	8003ca6 <__ssputs_r+0x6e>
 8003c4c:	898a      	ldrh	r2, [r1, #12]
 8003c4e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c52:	d026      	beq.n	8003ca2 <__ssputs_r+0x6a>
 8003c54:	6965      	ldr	r5, [r4, #20]
 8003c56:	6909      	ldr	r1, [r1, #16]
 8003c58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c5c:	eba3 0901 	sub.w	r9, r3, r1
 8003c60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c64:	1c7b      	adds	r3, r7, #1
 8003c66:	444b      	add	r3, r9
 8003c68:	106d      	asrs	r5, r5, #1
 8003c6a:	429d      	cmp	r5, r3
 8003c6c:	bf38      	it	cc
 8003c6e:	461d      	movcc	r5, r3
 8003c70:	0553      	lsls	r3, r2, #21
 8003c72:	d527      	bpl.n	8003cc4 <__ssputs_r+0x8c>
 8003c74:	4629      	mov	r1, r5
 8003c76:	f7ff ff53 	bl	8003b20 <_malloc_r>
 8003c7a:	4606      	mov	r6, r0
 8003c7c:	b360      	cbz	r0, 8003cd8 <__ssputs_r+0xa0>
 8003c7e:	6921      	ldr	r1, [r4, #16]
 8003c80:	464a      	mov	r2, r9
 8003c82:	f000 faeb 	bl	800425c <memcpy>
 8003c86:	89a3      	ldrh	r3, [r4, #12]
 8003c88:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c90:	81a3      	strh	r3, [r4, #12]
 8003c92:	6126      	str	r6, [r4, #16]
 8003c94:	6165      	str	r5, [r4, #20]
 8003c96:	444e      	add	r6, r9
 8003c98:	eba5 0509 	sub.w	r5, r5, r9
 8003c9c:	6026      	str	r6, [r4, #0]
 8003c9e:	60a5      	str	r5, [r4, #8]
 8003ca0:	463e      	mov	r6, r7
 8003ca2:	42be      	cmp	r6, r7
 8003ca4:	d900      	bls.n	8003ca8 <__ssputs_r+0x70>
 8003ca6:	463e      	mov	r6, r7
 8003ca8:	6820      	ldr	r0, [r4, #0]
 8003caa:	4632      	mov	r2, r6
 8003cac:	4641      	mov	r1, r8
 8003cae:	f000 faab 	bl	8004208 <memmove>
 8003cb2:	68a3      	ldr	r3, [r4, #8]
 8003cb4:	1b9b      	subs	r3, r3, r6
 8003cb6:	60a3      	str	r3, [r4, #8]
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	4433      	add	r3, r6
 8003cbc:	6023      	str	r3, [r4, #0]
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cc4:	462a      	mov	r2, r5
 8003cc6:	f000 fad7 	bl	8004278 <_realloc_r>
 8003cca:	4606      	mov	r6, r0
 8003ccc:	2800      	cmp	r0, #0
 8003cce:	d1e0      	bne.n	8003c92 <__ssputs_r+0x5a>
 8003cd0:	6921      	ldr	r1, [r4, #16]
 8003cd2:	4650      	mov	r0, sl
 8003cd4:	f7ff feb8 	bl	8003a48 <_free_r>
 8003cd8:	230c      	movs	r3, #12
 8003cda:	f8ca 3000 	str.w	r3, [sl]
 8003cde:	89a3      	ldrh	r3, [r4, #12]
 8003ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ce4:	81a3      	strh	r3, [r4, #12]
 8003ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cea:	e7e9      	b.n	8003cc0 <__ssputs_r+0x88>

08003cec <_svfiprintf_r>:
 8003cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cf0:	4698      	mov	r8, r3
 8003cf2:	898b      	ldrh	r3, [r1, #12]
 8003cf4:	061b      	lsls	r3, r3, #24
 8003cf6:	b09d      	sub	sp, #116	; 0x74
 8003cf8:	4607      	mov	r7, r0
 8003cfa:	460d      	mov	r5, r1
 8003cfc:	4614      	mov	r4, r2
 8003cfe:	d50e      	bpl.n	8003d1e <_svfiprintf_r+0x32>
 8003d00:	690b      	ldr	r3, [r1, #16]
 8003d02:	b963      	cbnz	r3, 8003d1e <_svfiprintf_r+0x32>
 8003d04:	2140      	movs	r1, #64	; 0x40
 8003d06:	f7ff ff0b 	bl	8003b20 <_malloc_r>
 8003d0a:	6028      	str	r0, [r5, #0]
 8003d0c:	6128      	str	r0, [r5, #16]
 8003d0e:	b920      	cbnz	r0, 8003d1a <_svfiprintf_r+0x2e>
 8003d10:	230c      	movs	r3, #12
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	f04f 30ff 	mov.w	r0, #4294967295
 8003d18:	e0d0      	b.n	8003ebc <_svfiprintf_r+0x1d0>
 8003d1a:	2340      	movs	r3, #64	; 0x40
 8003d1c:	616b      	str	r3, [r5, #20]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	9309      	str	r3, [sp, #36]	; 0x24
 8003d22:	2320      	movs	r3, #32
 8003d24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d28:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d2c:	2330      	movs	r3, #48	; 0x30
 8003d2e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003ed4 <_svfiprintf_r+0x1e8>
 8003d32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d36:	f04f 0901 	mov.w	r9, #1
 8003d3a:	4623      	mov	r3, r4
 8003d3c:	469a      	mov	sl, r3
 8003d3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d42:	b10a      	cbz	r2, 8003d48 <_svfiprintf_r+0x5c>
 8003d44:	2a25      	cmp	r2, #37	; 0x25
 8003d46:	d1f9      	bne.n	8003d3c <_svfiprintf_r+0x50>
 8003d48:	ebba 0b04 	subs.w	fp, sl, r4
 8003d4c:	d00b      	beq.n	8003d66 <_svfiprintf_r+0x7a>
 8003d4e:	465b      	mov	r3, fp
 8003d50:	4622      	mov	r2, r4
 8003d52:	4629      	mov	r1, r5
 8003d54:	4638      	mov	r0, r7
 8003d56:	f7ff ff6f 	bl	8003c38 <__ssputs_r>
 8003d5a:	3001      	adds	r0, #1
 8003d5c:	f000 80a9 	beq.w	8003eb2 <_svfiprintf_r+0x1c6>
 8003d60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d62:	445a      	add	r2, fp
 8003d64:	9209      	str	r2, [sp, #36]	; 0x24
 8003d66:	f89a 3000 	ldrb.w	r3, [sl]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 80a1 	beq.w	8003eb2 <_svfiprintf_r+0x1c6>
 8003d70:	2300      	movs	r3, #0
 8003d72:	f04f 32ff 	mov.w	r2, #4294967295
 8003d76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d7a:	f10a 0a01 	add.w	sl, sl, #1
 8003d7e:	9304      	str	r3, [sp, #16]
 8003d80:	9307      	str	r3, [sp, #28]
 8003d82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d86:	931a      	str	r3, [sp, #104]	; 0x68
 8003d88:	4654      	mov	r4, sl
 8003d8a:	2205      	movs	r2, #5
 8003d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d90:	4850      	ldr	r0, [pc, #320]	; (8003ed4 <_svfiprintf_r+0x1e8>)
 8003d92:	f7fc fa25 	bl	80001e0 <memchr>
 8003d96:	9a04      	ldr	r2, [sp, #16]
 8003d98:	b9d8      	cbnz	r0, 8003dd2 <_svfiprintf_r+0xe6>
 8003d9a:	06d0      	lsls	r0, r2, #27
 8003d9c:	bf44      	itt	mi
 8003d9e:	2320      	movmi	r3, #32
 8003da0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003da4:	0711      	lsls	r1, r2, #28
 8003da6:	bf44      	itt	mi
 8003da8:	232b      	movmi	r3, #43	; 0x2b
 8003daa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dae:	f89a 3000 	ldrb.w	r3, [sl]
 8003db2:	2b2a      	cmp	r3, #42	; 0x2a
 8003db4:	d015      	beq.n	8003de2 <_svfiprintf_r+0xf6>
 8003db6:	9a07      	ldr	r2, [sp, #28]
 8003db8:	4654      	mov	r4, sl
 8003dba:	2000      	movs	r0, #0
 8003dbc:	f04f 0c0a 	mov.w	ip, #10
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dc6:	3b30      	subs	r3, #48	; 0x30
 8003dc8:	2b09      	cmp	r3, #9
 8003dca:	d94d      	bls.n	8003e68 <_svfiprintf_r+0x17c>
 8003dcc:	b1b0      	cbz	r0, 8003dfc <_svfiprintf_r+0x110>
 8003dce:	9207      	str	r2, [sp, #28]
 8003dd0:	e014      	b.n	8003dfc <_svfiprintf_r+0x110>
 8003dd2:	eba0 0308 	sub.w	r3, r0, r8
 8003dd6:	fa09 f303 	lsl.w	r3, r9, r3
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	9304      	str	r3, [sp, #16]
 8003dde:	46a2      	mov	sl, r4
 8003de0:	e7d2      	b.n	8003d88 <_svfiprintf_r+0x9c>
 8003de2:	9b03      	ldr	r3, [sp, #12]
 8003de4:	1d19      	adds	r1, r3, #4
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	9103      	str	r1, [sp, #12]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	bfbb      	ittet	lt
 8003dee:	425b      	neglt	r3, r3
 8003df0:	f042 0202 	orrlt.w	r2, r2, #2
 8003df4:	9307      	strge	r3, [sp, #28]
 8003df6:	9307      	strlt	r3, [sp, #28]
 8003df8:	bfb8      	it	lt
 8003dfa:	9204      	strlt	r2, [sp, #16]
 8003dfc:	7823      	ldrb	r3, [r4, #0]
 8003dfe:	2b2e      	cmp	r3, #46	; 0x2e
 8003e00:	d10c      	bne.n	8003e1c <_svfiprintf_r+0x130>
 8003e02:	7863      	ldrb	r3, [r4, #1]
 8003e04:	2b2a      	cmp	r3, #42	; 0x2a
 8003e06:	d134      	bne.n	8003e72 <_svfiprintf_r+0x186>
 8003e08:	9b03      	ldr	r3, [sp, #12]
 8003e0a:	1d1a      	adds	r2, r3, #4
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	9203      	str	r2, [sp, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	bfb8      	it	lt
 8003e14:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e18:	3402      	adds	r4, #2
 8003e1a:	9305      	str	r3, [sp, #20]
 8003e1c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003ee4 <_svfiprintf_r+0x1f8>
 8003e20:	7821      	ldrb	r1, [r4, #0]
 8003e22:	2203      	movs	r2, #3
 8003e24:	4650      	mov	r0, sl
 8003e26:	f7fc f9db 	bl	80001e0 <memchr>
 8003e2a:	b138      	cbz	r0, 8003e3c <_svfiprintf_r+0x150>
 8003e2c:	9b04      	ldr	r3, [sp, #16]
 8003e2e:	eba0 000a 	sub.w	r0, r0, sl
 8003e32:	2240      	movs	r2, #64	; 0x40
 8003e34:	4082      	lsls	r2, r0
 8003e36:	4313      	orrs	r3, r2
 8003e38:	3401      	adds	r4, #1
 8003e3a:	9304      	str	r3, [sp, #16]
 8003e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e40:	4825      	ldr	r0, [pc, #148]	; (8003ed8 <_svfiprintf_r+0x1ec>)
 8003e42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e46:	2206      	movs	r2, #6
 8003e48:	f7fc f9ca 	bl	80001e0 <memchr>
 8003e4c:	2800      	cmp	r0, #0
 8003e4e:	d038      	beq.n	8003ec2 <_svfiprintf_r+0x1d6>
 8003e50:	4b22      	ldr	r3, [pc, #136]	; (8003edc <_svfiprintf_r+0x1f0>)
 8003e52:	bb1b      	cbnz	r3, 8003e9c <_svfiprintf_r+0x1b0>
 8003e54:	9b03      	ldr	r3, [sp, #12]
 8003e56:	3307      	adds	r3, #7
 8003e58:	f023 0307 	bic.w	r3, r3, #7
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	9303      	str	r3, [sp, #12]
 8003e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e62:	4433      	add	r3, r6
 8003e64:	9309      	str	r3, [sp, #36]	; 0x24
 8003e66:	e768      	b.n	8003d3a <_svfiprintf_r+0x4e>
 8003e68:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e6c:	460c      	mov	r4, r1
 8003e6e:	2001      	movs	r0, #1
 8003e70:	e7a6      	b.n	8003dc0 <_svfiprintf_r+0xd4>
 8003e72:	2300      	movs	r3, #0
 8003e74:	3401      	adds	r4, #1
 8003e76:	9305      	str	r3, [sp, #20]
 8003e78:	4619      	mov	r1, r3
 8003e7a:	f04f 0c0a 	mov.w	ip, #10
 8003e7e:	4620      	mov	r0, r4
 8003e80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e84:	3a30      	subs	r2, #48	; 0x30
 8003e86:	2a09      	cmp	r2, #9
 8003e88:	d903      	bls.n	8003e92 <_svfiprintf_r+0x1a6>
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0c6      	beq.n	8003e1c <_svfiprintf_r+0x130>
 8003e8e:	9105      	str	r1, [sp, #20]
 8003e90:	e7c4      	b.n	8003e1c <_svfiprintf_r+0x130>
 8003e92:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e96:	4604      	mov	r4, r0
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e7f0      	b.n	8003e7e <_svfiprintf_r+0x192>
 8003e9c:	ab03      	add	r3, sp, #12
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	462a      	mov	r2, r5
 8003ea2:	4b0f      	ldr	r3, [pc, #60]	; (8003ee0 <_svfiprintf_r+0x1f4>)
 8003ea4:	a904      	add	r1, sp, #16
 8003ea6:	4638      	mov	r0, r7
 8003ea8:	f3af 8000 	nop.w
 8003eac:	1c42      	adds	r2, r0, #1
 8003eae:	4606      	mov	r6, r0
 8003eb0:	d1d6      	bne.n	8003e60 <_svfiprintf_r+0x174>
 8003eb2:	89ab      	ldrh	r3, [r5, #12]
 8003eb4:	065b      	lsls	r3, r3, #25
 8003eb6:	f53f af2d 	bmi.w	8003d14 <_svfiprintf_r+0x28>
 8003eba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ebc:	b01d      	add	sp, #116	; 0x74
 8003ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ec2:	ab03      	add	r3, sp, #12
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	462a      	mov	r2, r5
 8003ec8:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <_svfiprintf_r+0x1f4>)
 8003eca:	a904      	add	r1, sp, #16
 8003ecc:	4638      	mov	r0, r7
 8003ece:	f000 f879 	bl	8003fc4 <_printf_i>
 8003ed2:	e7eb      	b.n	8003eac <_svfiprintf_r+0x1c0>
 8003ed4:	08004320 	.word	0x08004320
 8003ed8:	0800432a 	.word	0x0800432a
 8003edc:	00000000 	.word	0x00000000
 8003ee0:	08003c39 	.word	0x08003c39
 8003ee4:	08004326 	.word	0x08004326

08003ee8 <_printf_common>:
 8003ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eec:	4616      	mov	r6, r2
 8003eee:	4699      	mov	r9, r3
 8003ef0:	688a      	ldr	r2, [r1, #8]
 8003ef2:	690b      	ldr	r3, [r1, #16]
 8003ef4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	bfb8      	it	lt
 8003efc:	4613      	movlt	r3, r2
 8003efe:	6033      	str	r3, [r6, #0]
 8003f00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f04:	4607      	mov	r7, r0
 8003f06:	460c      	mov	r4, r1
 8003f08:	b10a      	cbz	r2, 8003f0e <_printf_common+0x26>
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	6033      	str	r3, [r6, #0]
 8003f0e:	6823      	ldr	r3, [r4, #0]
 8003f10:	0699      	lsls	r1, r3, #26
 8003f12:	bf42      	ittt	mi
 8003f14:	6833      	ldrmi	r3, [r6, #0]
 8003f16:	3302      	addmi	r3, #2
 8003f18:	6033      	strmi	r3, [r6, #0]
 8003f1a:	6825      	ldr	r5, [r4, #0]
 8003f1c:	f015 0506 	ands.w	r5, r5, #6
 8003f20:	d106      	bne.n	8003f30 <_printf_common+0x48>
 8003f22:	f104 0a19 	add.w	sl, r4, #25
 8003f26:	68e3      	ldr	r3, [r4, #12]
 8003f28:	6832      	ldr	r2, [r6, #0]
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	42ab      	cmp	r3, r5
 8003f2e:	dc26      	bgt.n	8003f7e <_printf_common+0x96>
 8003f30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f34:	1e13      	subs	r3, r2, #0
 8003f36:	6822      	ldr	r2, [r4, #0]
 8003f38:	bf18      	it	ne
 8003f3a:	2301      	movne	r3, #1
 8003f3c:	0692      	lsls	r2, r2, #26
 8003f3e:	d42b      	bmi.n	8003f98 <_printf_common+0xb0>
 8003f40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f44:	4649      	mov	r1, r9
 8003f46:	4638      	mov	r0, r7
 8003f48:	47c0      	blx	r8
 8003f4a:	3001      	adds	r0, #1
 8003f4c:	d01e      	beq.n	8003f8c <_printf_common+0xa4>
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	6922      	ldr	r2, [r4, #16]
 8003f52:	f003 0306 	and.w	r3, r3, #6
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	bf02      	ittt	eq
 8003f5a:	68e5      	ldreq	r5, [r4, #12]
 8003f5c:	6833      	ldreq	r3, [r6, #0]
 8003f5e:	1aed      	subeq	r5, r5, r3
 8003f60:	68a3      	ldr	r3, [r4, #8]
 8003f62:	bf0c      	ite	eq
 8003f64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f68:	2500      	movne	r5, #0
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	bfc4      	itt	gt
 8003f6e:	1a9b      	subgt	r3, r3, r2
 8003f70:	18ed      	addgt	r5, r5, r3
 8003f72:	2600      	movs	r6, #0
 8003f74:	341a      	adds	r4, #26
 8003f76:	42b5      	cmp	r5, r6
 8003f78:	d11a      	bne.n	8003fb0 <_printf_common+0xc8>
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	e008      	b.n	8003f90 <_printf_common+0xa8>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	4652      	mov	r2, sl
 8003f82:	4649      	mov	r1, r9
 8003f84:	4638      	mov	r0, r7
 8003f86:	47c0      	blx	r8
 8003f88:	3001      	adds	r0, #1
 8003f8a:	d103      	bne.n	8003f94 <_printf_common+0xac>
 8003f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f94:	3501      	adds	r5, #1
 8003f96:	e7c6      	b.n	8003f26 <_printf_common+0x3e>
 8003f98:	18e1      	adds	r1, r4, r3
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	2030      	movs	r0, #48	; 0x30
 8003f9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fa2:	4422      	add	r2, r4
 8003fa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fac:	3302      	adds	r3, #2
 8003fae:	e7c7      	b.n	8003f40 <_printf_common+0x58>
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	4622      	mov	r2, r4
 8003fb4:	4649      	mov	r1, r9
 8003fb6:	4638      	mov	r0, r7
 8003fb8:	47c0      	blx	r8
 8003fba:	3001      	adds	r0, #1
 8003fbc:	d0e6      	beq.n	8003f8c <_printf_common+0xa4>
 8003fbe:	3601      	adds	r6, #1
 8003fc0:	e7d9      	b.n	8003f76 <_printf_common+0x8e>
	...

08003fc4 <_printf_i>:
 8003fc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fc8:	7e0f      	ldrb	r7, [r1, #24]
 8003fca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fcc:	2f78      	cmp	r7, #120	; 0x78
 8003fce:	4691      	mov	r9, r2
 8003fd0:	4680      	mov	r8, r0
 8003fd2:	460c      	mov	r4, r1
 8003fd4:	469a      	mov	sl, r3
 8003fd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003fda:	d807      	bhi.n	8003fec <_printf_i+0x28>
 8003fdc:	2f62      	cmp	r7, #98	; 0x62
 8003fde:	d80a      	bhi.n	8003ff6 <_printf_i+0x32>
 8003fe0:	2f00      	cmp	r7, #0
 8003fe2:	f000 80d4 	beq.w	800418e <_printf_i+0x1ca>
 8003fe6:	2f58      	cmp	r7, #88	; 0x58
 8003fe8:	f000 80c0 	beq.w	800416c <_printf_i+0x1a8>
 8003fec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ff0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ff4:	e03a      	b.n	800406c <_printf_i+0xa8>
 8003ff6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ffa:	2b15      	cmp	r3, #21
 8003ffc:	d8f6      	bhi.n	8003fec <_printf_i+0x28>
 8003ffe:	a101      	add	r1, pc, #4	; (adr r1, 8004004 <_printf_i+0x40>)
 8004000:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004004:	0800405d 	.word	0x0800405d
 8004008:	08004071 	.word	0x08004071
 800400c:	08003fed 	.word	0x08003fed
 8004010:	08003fed 	.word	0x08003fed
 8004014:	08003fed 	.word	0x08003fed
 8004018:	08003fed 	.word	0x08003fed
 800401c:	08004071 	.word	0x08004071
 8004020:	08003fed 	.word	0x08003fed
 8004024:	08003fed 	.word	0x08003fed
 8004028:	08003fed 	.word	0x08003fed
 800402c:	08003fed 	.word	0x08003fed
 8004030:	08004175 	.word	0x08004175
 8004034:	0800409d 	.word	0x0800409d
 8004038:	0800412f 	.word	0x0800412f
 800403c:	08003fed 	.word	0x08003fed
 8004040:	08003fed 	.word	0x08003fed
 8004044:	08004197 	.word	0x08004197
 8004048:	08003fed 	.word	0x08003fed
 800404c:	0800409d 	.word	0x0800409d
 8004050:	08003fed 	.word	0x08003fed
 8004054:	08003fed 	.word	0x08003fed
 8004058:	08004137 	.word	0x08004137
 800405c:	682b      	ldr	r3, [r5, #0]
 800405e:	1d1a      	adds	r2, r3, #4
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	602a      	str	r2, [r5, #0]
 8004064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004068:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800406c:	2301      	movs	r3, #1
 800406e:	e09f      	b.n	80041b0 <_printf_i+0x1ec>
 8004070:	6820      	ldr	r0, [r4, #0]
 8004072:	682b      	ldr	r3, [r5, #0]
 8004074:	0607      	lsls	r7, r0, #24
 8004076:	f103 0104 	add.w	r1, r3, #4
 800407a:	6029      	str	r1, [r5, #0]
 800407c:	d501      	bpl.n	8004082 <_printf_i+0xbe>
 800407e:	681e      	ldr	r6, [r3, #0]
 8004080:	e003      	b.n	800408a <_printf_i+0xc6>
 8004082:	0646      	lsls	r6, r0, #25
 8004084:	d5fb      	bpl.n	800407e <_printf_i+0xba>
 8004086:	f9b3 6000 	ldrsh.w	r6, [r3]
 800408a:	2e00      	cmp	r6, #0
 800408c:	da03      	bge.n	8004096 <_printf_i+0xd2>
 800408e:	232d      	movs	r3, #45	; 0x2d
 8004090:	4276      	negs	r6, r6
 8004092:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004096:	485a      	ldr	r0, [pc, #360]	; (8004200 <_printf_i+0x23c>)
 8004098:	230a      	movs	r3, #10
 800409a:	e012      	b.n	80040c2 <_printf_i+0xfe>
 800409c:	682b      	ldr	r3, [r5, #0]
 800409e:	6820      	ldr	r0, [r4, #0]
 80040a0:	1d19      	adds	r1, r3, #4
 80040a2:	6029      	str	r1, [r5, #0]
 80040a4:	0605      	lsls	r5, r0, #24
 80040a6:	d501      	bpl.n	80040ac <_printf_i+0xe8>
 80040a8:	681e      	ldr	r6, [r3, #0]
 80040aa:	e002      	b.n	80040b2 <_printf_i+0xee>
 80040ac:	0641      	lsls	r1, r0, #25
 80040ae:	d5fb      	bpl.n	80040a8 <_printf_i+0xe4>
 80040b0:	881e      	ldrh	r6, [r3, #0]
 80040b2:	4853      	ldr	r0, [pc, #332]	; (8004200 <_printf_i+0x23c>)
 80040b4:	2f6f      	cmp	r7, #111	; 0x6f
 80040b6:	bf0c      	ite	eq
 80040b8:	2308      	moveq	r3, #8
 80040ba:	230a      	movne	r3, #10
 80040bc:	2100      	movs	r1, #0
 80040be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040c2:	6865      	ldr	r5, [r4, #4]
 80040c4:	60a5      	str	r5, [r4, #8]
 80040c6:	2d00      	cmp	r5, #0
 80040c8:	bfa2      	ittt	ge
 80040ca:	6821      	ldrge	r1, [r4, #0]
 80040cc:	f021 0104 	bicge.w	r1, r1, #4
 80040d0:	6021      	strge	r1, [r4, #0]
 80040d2:	b90e      	cbnz	r6, 80040d8 <_printf_i+0x114>
 80040d4:	2d00      	cmp	r5, #0
 80040d6:	d04b      	beq.n	8004170 <_printf_i+0x1ac>
 80040d8:	4615      	mov	r5, r2
 80040da:	fbb6 f1f3 	udiv	r1, r6, r3
 80040de:	fb03 6711 	mls	r7, r3, r1, r6
 80040e2:	5dc7      	ldrb	r7, [r0, r7]
 80040e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040e8:	4637      	mov	r7, r6
 80040ea:	42bb      	cmp	r3, r7
 80040ec:	460e      	mov	r6, r1
 80040ee:	d9f4      	bls.n	80040da <_printf_i+0x116>
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d10b      	bne.n	800410c <_printf_i+0x148>
 80040f4:	6823      	ldr	r3, [r4, #0]
 80040f6:	07de      	lsls	r6, r3, #31
 80040f8:	d508      	bpl.n	800410c <_printf_i+0x148>
 80040fa:	6923      	ldr	r3, [r4, #16]
 80040fc:	6861      	ldr	r1, [r4, #4]
 80040fe:	4299      	cmp	r1, r3
 8004100:	bfde      	ittt	le
 8004102:	2330      	movle	r3, #48	; 0x30
 8004104:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004108:	f105 35ff 	addle.w	r5, r5, #4294967295
 800410c:	1b52      	subs	r2, r2, r5
 800410e:	6122      	str	r2, [r4, #16]
 8004110:	f8cd a000 	str.w	sl, [sp]
 8004114:	464b      	mov	r3, r9
 8004116:	aa03      	add	r2, sp, #12
 8004118:	4621      	mov	r1, r4
 800411a:	4640      	mov	r0, r8
 800411c:	f7ff fee4 	bl	8003ee8 <_printf_common>
 8004120:	3001      	adds	r0, #1
 8004122:	d14a      	bne.n	80041ba <_printf_i+0x1f6>
 8004124:	f04f 30ff 	mov.w	r0, #4294967295
 8004128:	b004      	add	sp, #16
 800412a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800412e:	6823      	ldr	r3, [r4, #0]
 8004130:	f043 0320 	orr.w	r3, r3, #32
 8004134:	6023      	str	r3, [r4, #0]
 8004136:	4833      	ldr	r0, [pc, #204]	; (8004204 <_printf_i+0x240>)
 8004138:	2778      	movs	r7, #120	; 0x78
 800413a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800413e:	6823      	ldr	r3, [r4, #0]
 8004140:	6829      	ldr	r1, [r5, #0]
 8004142:	061f      	lsls	r7, r3, #24
 8004144:	f851 6b04 	ldr.w	r6, [r1], #4
 8004148:	d402      	bmi.n	8004150 <_printf_i+0x18c>
 800414a:	065f      	lsls	r7, r3, #25
 800414c:	bf48      	it	mi
 800414e:	b2b6      	uxthmi	r6, r6
 8004150:	07df      	lsls	r7, r3, #31
 8004152:	bf48      	it	mi
 8004154:	f043 0320 	orrmi.w	r3, r3, #32
 8004158:	6029      	str	r1, [r5, #0]
 800415a:	bf48      	it	mi
 800415c:	6023      	strmi	r3, [r4, #0]
 800415e:	b91e      	cbnz	r6, 8004168 <_printf_i+0x1a4>
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	f023 0320 	bic.w	r3, r3, #32
 8004166:	6023      	str	r3, [r4, #0]
 8004168:	2310      	movs	r3, #16
 800416a:	e7a7      	b.n	80040bc <_printf_i+0xf8>
 800416c:	4824      	ldr	r0, [pc, #144]	; (8004200 <_printf_i+0x23c>)
 800416e:	e7e4      	b.n	800413a <_printf_i+0x176>
 8004170:	4615      	mov	r5, r2
 8004172:	e7bd      	b.n	80040f0 <_printf_i+0x12c>
 8004174:	682b      	ldr	r3, [r5, #0]
 8004176:	6826      	ldr	r6, [r4, #0]
 8004178:	6961      	ldr	r1, [r4, #20]
 800417a:	1d18      	adds	r0, r3, #4
 800417c:	6028      	str	r0, [r5, #0]
 800417e:	0635      	lsls	r5, r6, #24
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	d501      	bpl.n	8004188 <_printf_i+0x1c4>
 8004184:	6019      	str	r1, [r3, #0]
 8004186:	e002      	b.n	800418e <_printf_i+0x1ca>
 8004188:	0670      	lsls	r0, r6, #25
 800418a:	d5fb      	bpl.n	8004184 <_printf_i+0x1c0>
 800418c:	8019      	strh	r1, [r3, #0]
 800418e:	2300      	movs	r3, #0
 8004190:	6123      	str	r3, [r4, #16]
 8004192:	4615      	mov	r5, r2
 8004194:	e7bc      	b.n	8004110 <_printf_i+0x14c>
 8004196:	682b      	ldr	r3, [r5, #0]
 8004198:	1d1a      	adds	r2, r3, #4
 800419a:	602a      	str	r2, [r5, #0]
 800419c:	681d      	ldr	r5, [r3, #0]
 800419e:	6862      	ldr	r2, [r4, #4]
 80041a0:	2100      	movs	r1, #0
 80041a2:	4628      	mov	r0, r5
 80041a4:	f7fc f81c 	bl	80001e0 <memchr>
 80041a8:	b108      	cbz	r0, 80041ae <_printf_i+0x1ea>
 80041aa:	1b40      	subs	r0, r0, r5
 80041ac:	6060      	str	r0, [r4, #4]
 80041ae:	6863      	ldr	r3, [r4, #4]
 80041b0:	6123      	str	r3, [r4, #16]
 80041b2:	2300      	movs	r3, #0
 80041b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041b8:	e7aa      	b.n	8004110 <_printf_i+0x14c>
 80041ba:	6923      	ldr	r3, [r4, #16]
 80041bc:	462a      	mov	r2, r5
 80041be:	4649      	mov	r1, r9
 80041c0:	4640      	mov	r0, r8
 80041c2:	47d0      	blx	sl
 80041c4:	3001      	adds	r0, #1
 80041c6:	d0ad      	beq.n	8004124 <_printf_i+0x160>
 80041c8:	6823      	ldr	r3, [r4, #0]
 80041ca:	079b      	lsls	r3, r3, #30
 80041cc:	d413      	bmi.n	80041f6 <_printf_i+0x232>
 80041ce:	68e0      	ldr	r0, [r4, #12]
 80041d0:	9b03      	ldr	r3, [sp, #12]
 80041d2:	4298      	cmp	r0, r3
 80041d4:	bfb8      	it	lt
 80041d6:	4618      	movlt	r0, r3
 80041d8:	e7a6      	b.n	8004128 <_printf_i+0x164>
 80041da:	2301      	movs	r3, #1
 80041dc:	4632      	mov	r2, r6
 80041de:	4649      	mov	r1, r9
 80041e0:	4640      	mov	r0, r8
 80041e2:	47d0      	blx	sl
 80041e4:	3001      	adds	r0, #1
 80041e6:	d09d      	beq.n	8004124 <_printf_i+0x160>
 80041e8:	3501      	adds	r5, #1
 80041ea:	68e3      	ldr	r3, [r4, #12]
 80041ec:	9903      	ldr	r1, [sp, #12]
 80041ee:	1a5b      	subs	r3, r3, r1
 80041f0:	42ab      	cmp	r3, r5
 80041f2:	dcf2      	bgt.n	80041da <_printf_i+0x216>
 80041f4:	e7eb      	b.n	80041ce <_printf_i+0x20a>
 80041f6:	2500      	movs	r5, #0
 80041f8:	f104 0619 	add.w	r6, r4, #25
 80041fc:	e7f5      	b.n	80041ea <_printf_i+0x226>
 80041fe:	bf00      	nop
 8004200:	08004331 	.word	0x08004331
 8004204:	08004342 	.word	0x08004342

08004208 <memmove>:
 8004208:	4288      	cmp	r0, r1
 800420a:	b510      	push	{r4, lr}
 800420c:	eb01 0402 	add.w	r4, r1, r2
 8004210:	d902      	bls.n	8004218 <memmove+0x10>
 8004212:	4284      	cmp	r4, r0
 8004214:	4623      	mov	r3, r4
 8004216:	d807      	bhi.n	8004228 <memmove+0x20>
 8004218:	1e43      	subs	r3, r0, #1
 800421a:	42a1      	cmp	r1, r4
 800421c:	d008      	beq.n	8004230 <memmove+0x28>
 800421e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004222:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004226:	e7f8      	b.n	800421a <memmove+0x12>
 8004228:	4402      	add	r2, r0
 800422a:	4601      	mov	r1, r0
 800422c:	428a      	cmp	r2, r1
 800422e:	d100      	bne.n	8004232 <memmove+0x2a>
 8004230:	bd10      	pop	{r4, pc}
 8004232:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004236:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800423a:	e7f7      	b.n	800422c <memmove+0x24>

0800423c <_sbrk_r>:
 800423c:	b538      	push	{r3, r4, r5, lr}
 800423e:	4d06      	ldr	r5, [pc, #24]	; (8004258 <_sbrk_r+0x1c>)
 8004240:	2300      	movs	r3, #0
 8004242:	4604      	mov	r4, r0
 8004244:	4608      	mov	r0, r1
 8004246:	602b      	str	r3, [r5, #0]
 8004248:	f7fd f906 	bl	8001458 <_sbrk>
 800424c:	1c43      	adds	r3, r0, #1
 800424e:	d102      	bne.n	8004256 <_sbrk_r+0x1a>
 8004250:	682b      	ldr	r3, [r5, #0]
 8004252:	b103      	cbz	r3, 8004256 <_sbrk_r+0x1a>
 8004254:	6023      	str	r3, [r4, #0]
 8004256:	bd38      	pop	{r3, r4, r5, pc}
 8004258:	20000260 	.word	0x20000260

0800425c <memcpy>:
 800425c:	440a      	add	r2, r1
 800425e:	4291      	cmp	r1, r2
 8004260:	f100 33ff 	add.w	r3, r0, #4294967295
 8004264:	d100      	bne.n	8004268 <memcpy+0xc>
 8004266:	4770      	bx	lr
 8004268:	b510      	push	{r4, lr}
 800426a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800426e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004272:	4291      	cmp	r1, r2
 8004274:	d1f9      	bne.n	800426a <memcpy+0xe>
 8004276:	bd10      	pop	{r4, pc}

08004278 <_realloc_r>:
 8004278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800427c:	4680      	mov	r8, r0
 800427e:	4614      	mov	r4, r2
 8004280:	460e      	mov	r6, r1
 8004282:	b921      	cbnz	r1, 800428e <_realloc_r+0x16>
 8004284:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004288:	4611      	mov	r1, r2
 800428a:	f7ff bc49 	b.w	8003b20 <_malloc_r>
 800428e:	b92a      	cbnz	r2, 800429c <_realloc_r+0x24>
 8004290:	f7ff fbda 	bl	8003a48 <_free_r>
 8004294:	4625      	mov	r5, r4
 8004296:	4628      	mov	r0, r5
 8004298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800429c:	f000 f81b 	bl	80042d6 <_malloc_usable_size_r>
 80042a0:	4284      	cmp	r4, r0
 80042a2:	4607      	mov	r7, r0
 80042a4:	d802      	bhi.n	80042ac <_realloc_r+0x34>
 80042a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80042aa:	d812      	bhi.n	80042d2 <_realloc_r+0x5a>
 80042ac:	4621      	mov	r1, r4
 80042ae:	4640      	mov	r0, r8
 80042b0:	f7ff fc36 	bl	8003b20 <_malloc_r>
 80042b4:	4605      	mov	r5, r0
 80042b6:	2800      	cmp	r0, #0
 80042b8:	d0ed      	beq.n	8004296 <_realloc_r+0x1e>
 80042ba:	42bc      	cmp	r4, r7
 80042bc:	4622      	mov	r2, r4
 80042be:	4631      	mov	r1, r6
 80042c0:	bf28      	it	cs
 80042c2:	463a      	movcs	r2, r7
 80042c4:	f7ff ffca 	bl	800425c <memcpy>
 80042c8:	4631      	mov	r1, r6
 80042ca:	4640      	mov	r0, r8
 80042cc:	f7ff fbbc 	bl	8003a48 <_free_r>
 80042d0:	e7e1      	b.n	8004296 <_realloc_r+0x1e>
 80042d2:	4635      	mov	r5, r6
 80042d4:	e7df      	b.n	8004296 <_realloc_r+0x1e>

080042d6 <_malloc_usable_size_r>:
 80042d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042da:	1f18      	subs	r0, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	bfbc      	itt	lt
 80042e0:	580b      	ldrlt	r3, [r1, r0]
 80042e2:	18c0      	addlt	r0, r0, r3
 80042e4:	4770      	bx	lr
	...

080042e8 <_init>:
 80042e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ea:	bf00      	nop
 80042ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ee:	bc08      	pop	{r3}
 80042f0:	469e      	mov	lr, r3
 80042f2:	4770      	bx	lr

080042f4 <_fini>:
 80042f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f6:	bf00      	nop
 80042f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042fa:	bc08      	pop	{r3}
 80042fc:	469e      	mov	lr, r3
 80042fe:	4770      	bx	lr
